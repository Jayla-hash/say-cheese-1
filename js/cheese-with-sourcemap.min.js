!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.adapter=e()}}(function(){return function e(t,r,n){function i(o,s){if(!r[o]){if(!t[o]){var c="function"==typeof require&&require;if(!s&&c)return c(o,!0);if(a)return a(o,!0);var d=new Error("Cannot find module '"+o+"'");throw d.code="MODULE_NOT_FOUND",d}var p=r[o]={exports:{}};t[o][0].call(p.exports,function(e){var r=t[o][1][e];return i(r||e)},p,p.exports,e,t,r,n)}return r[o].exports}for(var a="function"==typeof require&&require,o=0;o<n.length;o++)i(n[o]);return i}({1:[function(e,t,r){"use strict";function n(e,t,r,n){var i=c.writeRtpDescription(e.kind,t);if(i+=c.writeIceParameters(e.iceGatherer.getLocalParameters()),i+=c.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===r?"actpass":"active"),i+="a=mid:"+e.mid+"\r\n",e.direction?i+="a="+e.direction+"\r\n":e.rtpSender&&e.rtpReceiver?i+="a=sendrecv\r\n":e.rtpSender?i+="a=sendonly\r\n":e.rtpReceiver?i+="a=recvonly\r\n":i+="a=inactive\r\n",e.rtpSender){var a="msid:"+n.id+" "+e.rtpSender.track.id+"\r\n";i+="a="+a,i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+a,e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+a,i+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return i+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+c.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(i+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+c.localCName+"\r\n"),i}function i(e,t){var r=!1;return e=JSON.parse(JSON.stringify(e)),e.filter(function(e){if(e&&(e.urls||e.url)){var n=e.urls||e.url;e.url&&!e.urls&&console.warn("RTCIceServer.url is deprecated! Use urls instead.");var i="string"==typeof n;return i&&(n=[n]),n=n.filter(function(e){return 0!==e.indexOf("turn:")||-1===e.indexOf("transport=udp")||-1!==e.indexOf("turn:[")||r?0===e.indexOf("stun:")&&t>=14393&&-1===e.indexOf("?transport=udp"):(r=!0,!0)}),delete e.url,e.urls=i?n[0]:n,!!n.length}return!1})}function a(e,t){var r={codecs:[],headerExtensions:[],fecMechanisms:[]},n=function(e,t){e=parseInt(e,10);for(var r=0;r<t.length;r++)if(t[r].payloadType===e||t[r].preferredPayloadType===e)return t[r]},i=function(e,t,r,i){var a=n(e.parameters.apt,r),o=n(t.parameters.apt,i);return a&&o&&a.name.toLowerCase()===o.name.toLowerCase()};return e.codecs.forEach(function(n){for(var a=0;a<t.codecs.length;a++){var o=t.codecs[a];if(n.name.toLowerCase()===o.name.toLowerCase()&&n.clockRate===o.clockRate){if("rtx"===n.name.toLowerCase()&&n.parameters&&o.parameters.apt&&!i(n,o,e.codecs,t.codecs))continue;o=JSON.parse(JSON.stringify(o)),o.numChannels=Math.min(n.numChannels,o.numChannels),r.codecs.push(o),o.rtcpFeedback=o.rtcpFeedback.filter(function(e){for(var t=0;t<n.rtcpFeedback.length;t++)if(n.rtcpFeedback[t].type===e.type&&n.rtcpFeedback[t].parameter===e.parameter)return!0;return!1});break}}}),e.headerExtensions.forEach(function(e){for(var n=0;n<t.headerExtensions.length;n++){var i=t.headerExtensions[n];if(e.uri===i.uri){r.headerExtensions.push(i);break}}}),r}function o(e,t,r){return-1!=={offer:{setLocalDescription:["stable","have-local-offer"],setRemoteDescription:["stable","have-remote-offer"]},answer:{setLocalDescription:["have-remote-offer","have-local-pranswer"],setRemoteDescription:["have-local-offer","have-remote-pranswer"]}}[t][e].indexOf(r)}function s(e,t){e.getRemoteCandidates().find(function(e){return t.foundation===e.foundation&&t.ip===e.ip&&t.port===e.port&&t.priority===e.priority&&t.protocol===e.protocol&&t.type===e.type})||e.addRemoteCandidate(t)}var c=e("sdp");t.exports=function(e,t){var r=function(r){var n=this,a=document.createDocumentFragment();if(["addEventListener","removeEventListener","dispatchEvent"].forEach(function(e){n[e]=a[e].bind(a)}),this.onicecandidate=null,this.onaddstream=null,this.ontrack=null,this.onremovestream=null,this.onsignalingstatechange=null,this.oniceconnectionstatechange=null,this.onicegatheringstatechange=null,this.onnegotiationneeded=null,this.ondatachannel=null,this.canTrickleIceCandidates=null,this.needNegotiation=!1,this.localStreams=[],this.remoteStreams=[],this.localDescription=null,this.remoteDescription=null,this.signalingState="stable",this.iceConnectionState="new",this.iceGatheringState="new",r=JSON.parse(JSON.stringify(r||{})),this.usingBundle="max-bundle"===r.bundlePolicy,"negotiate"===r.rtcpMuxPolicy){var o=new Error("rtcpMuxPolicy 'negotiate' is not supported");throw o.name="NotSupportedError",o}switch(r.rtcpMuxPolicy||(r.rtcpMuxPolicy="require"),r.iceTransportPolicy){case"all":case"relay":break;default:r.iceTransportPolicy="all"}switch(r.bundlePolicy){case"balanced":case"max-compat":case"max-bundle":break;default:r.bundlePolicy="balanced"}if(r.iceServers=i(r.iceServers||[],t),this._iceGatherers=[],r.iceCandidatePoolSize)for(var s=r.iceCandidatePoolSize;s>0;s--)this._iceGatherers=new e.RTCIceGatherer({iceServers:r.iceServers,gatherPolicy:r.iceTransportPolicy});else r.iceCandidatePoolSize=0;this._config=r,this.transceivers=[],this._sdpSessionId=c.generateSessionId(),this._sdpSessionVersion=0};return r.prototype._emitGatheringStateChange=function(){var e=new Event("icegatheringstatechange");this.dispatchEvent(e),null!==this.onicegatheringstatechange&&this.onicegatheringstatechange(e)},r.prototype.getConfiguration=function(){return this._config},r.prototype.getLocalStreams=function(){return this.localStreams},r.prototype.getRemoteStreams=function(){return this.remoteStreams},r.prototype._createTransceiver=function(e){var t=this.transceivers.length>0,r={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:e,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,wantReceive:!0};if(this.usingBundle&&t)r.iceTransport=this.transceivers[0].iceTransport,r.dtlsTransport=this.transceivers[0].dtlsTransport;else{var n=this._createIceAndDtlsTransports();r.iceTransport=n.iceTransport,r.dtlsTransport=n.dtlsTransport}return this.transceivers.push(r),r},r.prototype.addTrack=function(t,r){for(var n,i=0;i<this.transceivers.length;i++)this.transceivers[i].track||this.transceivers[i].kind!==t.kind||(n=this.transceivers[i]);return n||(n=this._createTransceiver(t.kind)),this._maybeFireNegotiationNeeded(),-1===this.localStreams.indexOf(r)&&this.localStreams.push(r),n.track=t,n.stream=r,n.rtpSender=new e.RTCRtpSender(t,n.dtlsTransport),n.rtpSender},r.prototype.addStream=function(e){var r=this;if(t>=15025)e.getTracks().forEach(function(t){r.addTrack(t,e)});else{var n=e.clone();e.getTracks().forEach(function(e,t){var r=n.getTracks()[t];e.addEventListener("enabled",function(e){r.enabled=e.enabled})}),n.getTracks().forEach(function(e){r.addTrack(e,n)})}},r.prototype.removeStream=function(e){var t=this.localStreams.indexOf(e);t>-1&&(this.localStreams.splice(t,1),this._maybeFireNegotiationNeeded())},r.prototype.getSenders=function(){return this.transceivers.filter(function(e){return!!e.rtpSender}).map(function(e){return e.rtpSender})},r.prototype.getReceivers=function(){return this.transceivers.filter(function(e){return!!e.rtpReceiver}).map(function(e){return e.rtpReceiver})},r.prototype._createIceGatherer=function(t,r){var n=this;if(r&&t>0)return this.transceivers[0].iceGatherer;if(this._iceGatherers.length)return this._iceGatherers.shift();var i=new e.RTCIceGatherer({iceServers:this._config.iceServers,gatherPolicy:this._config.iceTransportPolicy});return Object.defineProperty(i,"state",{value:"new",writable:!0}),this.transceivers[t].candidates=[],this.transceivers[t].bufferCandidates=function(e){var r=!e.candidate||0===Object.keys(e.candidate).length;i.state=r?"completed":"gathering",null!==n.transceivers[t].candidates&&n.transceivers[t].candidates.push(e.candidate)},i.addEventListener("localcandidate",this.transceivers[t].bufferCandidates),i},r.prototype._gather=function(t,r){var n=this,i=this.transceivers[r].iceGatherer;if(!i.onlocalcandidate){var a=this.transceivers[r].candidates;this.transceivers[r].candidates=null,i.removeEventListener("localcandidate",this.transceivers[r].bufferCandidates),i.onlocalcandidate=function(e){if(!(n.usingBundle&&r>0)){var a=new Event("icecandidate");a.candidate={sdpMid:t,sdpMLineIndex:r};var o=e.candidate,s=!o||0===Object.keys(o).length;s?"new"!==i.state&&"gathering"!==i.state||(i.state="completed"):("new"===i.state&&(i.state="gathering"),o.component=1,a.candidate.candidate=c.writeCandidate(o));var d=c.splitSections(n.localDescription.sdp);d[a.candidate.sdpMLineIndex+1]+=s?"a=end-of-candidates\r\n":"a="+a.candidate.candidate+"\r\n",n.localDescription.sdp=d.join("");var p=n.transceivers.every(function(e){return e.iceGatherer&&"completed"===e.iceGatherer.state});"gathering"!==n.iceGatheringState&&(n.iceGatheringState="gathering",n._emitGatheringStateChange()),s||(n.dispatchEvent(a),null!==n.onicecandidate&&n.onicecandidate(a)),p&&(n.dispatchEvent(new Event("icecandidate")),null!==n.onicecandidate&&n.onicecandidate(new Event("icecandidate")),n.iceGatheringState="complete",n._emitGatheringStateChange())}},e.setTimeout(function(){a.forEach(function(e){var t=new Event("RTCIceGatherEvent");t.candidate=e,i.onlocalcandidate(t)})},0)}},r.prototype._createIceAndDtlsTransports=function(){var t=this,r=new e.RTCIceTransport(null);r.onicestatechange=function(){t._updateConnectionState()};var n=new e.RTCDtlsTransport(r);return n.ondtlsstatechange=function(){t._updateConnectionState()},n.onerror=function(){Object.defineProperty(n,"state",{value:"failed",writable:!0}),t._updateConnectionState()},{iceTransport:r,dtlsTransport:n}},r.prototype._disposeIceAndDtlsTransports=function(e){var t=this.transceivers[e].iceGatherer;t&&(delete t.onlocalcandidate,delete this.transceivers[e].iceGatherer);var r=this.transceivers[e].iceTransport;r&&(delete r.onicestatechange,delete this.transceivers[e].iceTransport);var n=this.transceivers[e].dtlsTransport;n&&(delete n.ondtlsstatechange,delete n.onerror,delete this.transceivers[e].dtlsTransport)},r.prototype._transceive=function(e,r,n){var i=a(e.localCapabilities,e.remoteCapabilities);r&&e.rtpSender&&(i.encodings=e.sendEncodingParameters,i.rtcp={cname:c.localCName,compound:e.rtcpParameters.compound},e.recvEncodingParameters.length&&(i.rtcp.ssrc=e.recvEncodingParameters[0].ssrc),e.rtpSender.send(i)),n&&e.rtpReceiver&&("video"===e.kind&&e.recvEncodingParameters&&t<15019&&e.recvEncodingParameters.forEach(function(e){delete e.rtx}),i.encodings=e.recvEncodingParameters,i.rtcp={cname:e.rtcpParameters.cname,compound:e.rtcpParameters.compound},e.sendEncodingParameters.length&&(i.rtcp.ssrc=e.sendEncodingParameters[0].ssrc),e.rtpReceiver.receive(i))},r.prototype.setLocalDescription=function(e){var t=this,r=arguments;if(!o("setLocalDescription",e.type,this.signalingState))return new Promise(function(n,i){var a=new Error("Can not set remote "+e.type+" in state "+t.signalingState);a.name="InvalidStateError",r.length>2&&"function"==typeof r[2]&&r[2].apply(null,[a]),i(a)});var n,i;if("offer"===e.type)n=c.splitSections(e.sdp),i=n.shift(),n.forEach(function(e,r){var n=c.parseRtpParameters(e);t.transceivers[r].localCapabilities=n}),this.transceivers.forEach(function(e,r){t._gather(e.mid,r)});else if("answer"===e.type){n=c.splitSections(t.remoteDescription.sdp),i=n.shift();var s=c.matchPrefix(i,"a=ice-lite").length>0;n.forEach(function(e,r){var n=t.transceivers[r],o=n.iceGatherer,d=n.iceTransport,p=n.dtlsTransport,u=n.localCapabilities,l=n.remoteCapabilities;if(!c.isRejected(e)&&!n.isDatachannel){var f=c.getIceParameters(e,i),m=c.getDtlsParameters(e,i);s&&(m.role="server"),t.usingBundle&&0!==r||(t._gather(n.mid,r),"new"===d.state&&d.start(o,f,s?"controlling":"controlled"),"new"===p.state&&p.start(m));var h=a(u,l);t._transceive(n,h.codecs.length>0,!1)}})}switch(this.localDescription={type:e.type,sdp:e.sdp},e.type){case"offer":this._updateSignalingState("have-local-offer");break;case"answer":this._updateSignalingState("stable");break;default:throw new TypeError('unsupported type "'+e.type+'"')}var d=arguments.length>1&&"function"==typeof arguments[1]&&arguments[1];return new Promise(function(e){d&&d.apply(null),e()})},r.prototype.setRemoteDescription=function(r){var n=this,i=arguments;if(!o("setRemoteDescription",r.type,this.signalingState))return new Promise(function(e,t){var a=new Error("Can not set remote "+r.type+" in state "+n.signalingState);a.name="InvalidStateError",i.length>2&&"function"==typeof i[2]&&i[2].apply(null,[a]),t(a)});var a={};this.remoteStreams.forEach(function(e){a[e.id]=e});var d=[],p=c.splitSections(r.sdp),u=p.shift(),l=c.matchPrefix(u,"a=ice-lite").length>0,f=c.matchPrefix(u,"a=group:BUNDLE ").length>0;this.usingBundle=f;var m=c.matchPrefix(u,"a=ice-options:")[0];switch(this.canTrickleIceCandidates=!!m&&m.substr(14).split(" ").indexOf("trickle")>=0,p.forEach(function(i,o){var p=c.splitLines(i),m=c.getKind(i),h=c.isRejected(i),v=p[0].substr(2).split(" ")[2],g=c.getDirection(i,u),y=c.parseMsid(i),C=c.getMid(i)||c.generateIdentifier();if("application"===m&&"DTLS/SCTP"===v)return void(n.transceivers[o]={mid:C,isDatachannel:!0});var T,S,b,P,R,E,w,k,_,x,O,D=c.parseRtpParameters(i);h||(x=c.getIceParameters(i,u),O=c.getDtlsParameters(i,u),O.role="client"),w=c.parseRtpEncodingParameters(i);var M=c.parseRtcpParameters(i),j=c.matchPrefix(i,"a=end-of-candidates",u).length>0,I=c.matchPrefix(i,"a=candidate:").map(function(e){return c.parseCandidate(e)}).filter(function(e){return 1===e.component});if(("offer"===r.type||"answer"===r.type)&&!h&&f&&o>0&&n.transceivers[o]&&(n._disposeIceAndDtlsTransports(o),n.transceivers[o].iceGatherer=n.transceivers[0].iceGatherer,n.transceivers[o].iceTransport=n.transceivers[0].iceTransport,n.transceivers[o].dtlsTransport=n.transceivers[0].dtlsTransport,n.transceivers[o].rtpSender&&n.transceivers[o].rtpSender.setTransport(n.transceivers[0].dtlsTransport),n.transceivers[o].rtpReceiver&&n.transceivers[o].rtpReceiver.setTransport(n.transceivers[0].dtlsTransport)),"offer"!==r.type||h)"answer"!==r.type||h||(T=n.transceivers[o],S=T.iceGatherer,b=T.iceTransport,P=T.dtlsTransport,R=T.rtpReceiver,E=T.sendEncodingParameters,k=T.localCapabilities,n.transceivers[o].recvEncodingParameters=w,n.transceivers[o].remoteCapabilities=D,n.transceivers[o].rtcpParameters=M,I.length&&(!l&&!j||f&&0!==o||"new"!==b.state?I.forEach(function(e){s(T.iceTransport,e)}):b.setRemoteCandidates(I)),f&&0!==o||("new"===b.state&&b.start(S,x,"controlling"),"new"===P.state&&P.start(O)),n._transceive(T,"sendrecv"===g||"recvonly"===g,"sendrecv"===g||"sendonly"===g),!R||"sendrecv"!==g&&"sendonly"!==g?delete T.rtpReceiver:(_=R.track,y?(a[y.stream]||(a[y.stream]=new e.MediaStream),a[y.stream].addTrack(_),d.push([_,R,a[y.stream]])):(a.default||(a.default=new e.MediaStream),a.default.addTrack(_),d.push([_,R,a.default]))));else{if(T=n.transceivers[o]||n._createTransceiver(m),T.mid=C,T.iceGatherer||(T.iceGatherer=n._createIceGatherer(o,f)),I.length&&(!j||f&&0!==o||"new"!==T.iceTransport.state?I.forEach(function(e){s(T.iceTransport,e)}):T.iceTransport.setRemoteCandidates(I)),k=e.RTCRtpReceiver.getCapabilities(m),t<15019&&(k.codecs=k.codecs.filter(function(e){return"rtx"!==e.name})),E=[{ssrc:1001*(2*o+2)}],"sendrecv"===g||"sendonly"===g){var L=!T.rtpReceiver;if(R=T.rtpReceiver||new e.RTCRtpReceiver(T.dtlsTransport,m),L){var U;_=R.track,y?(a[y.stream]||(a[y.stream]=new e.MediaStream,Object.defineProperty(a[y.stream],"id",{get:function(){return y.stream}})),Object.defineProperty(_,"id",{get:function(){return y.track}}),U=a[y.stream]):(a.default||(a.default=new e.MediaStream),U=a.default),U.addTrack(_),d.push([_,R,U])}}T.localCapabilities=k,T.remoteCapabilities=D,T.rtpReceiver=R,T.rtcpParameters=M,T.sendEncodingParameters=E,T.recvEncodingParameters=w,n._transceive(n.transceivers[o],!1,"sendrecv"===g||"sendonly"===g)}}),this.remoteDescription={type:r.type,sdp:r.sdp},r.type){case"offer":this._updateSignalingState("have-remote-offer");break;case"answer":this._updateSignalingState("stable");break;default:throw new TypeError('unsupported type "'+r.type+'"')}return Object.keys(a).forEach(function(t){var r=a[t];if(r.getTracks().length){if(-1===n.remoteStreams.indexOf(r)){n.remoteStreams.push(r);var i=new Event("addstream");i.stream=r,e.setTimeout(function(){n.dispatchEvent(i),null!==n.onaddstream&&n.onaddstream(i)})}d.forEach(function(t){var i=t[0],a=t[1];if(r.id===t[2].id){var o=new Event("track");o.track=i,o.receiver=a,o.transceiver={receiver:a},o.streams=[r],e.setTimeout(function(){n.dispatchEvent(o),null!==n.ontrack&&n.ontrack(o)})}})}}),e.setTimeout(function(){n&&n.transceivers&&n.transceivers.forEach(function(e){e.iceTransport&&"new"===e.iceTransport.state&&e.iceTransport.getRemoteCandidates().length>0&&(console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"),e.iceTransport.addRemoteCandidate({}))})},4e3),new Promise(function(e){i.length>1&&"function"==typeof i[1]&&i[1].apply(null),e()})},r.prototype.close=function(){this.transceivers.forEach(function(e){e.iceTransport&&e.iceTransport.stop(),e.dtlsTransport&&e.dtlsTransport.stop(),e.rtpSender&&e.rtpSender.stop(),e.rtpReceiver&&e.rtpReceiver.stop()}),this._updateSignalingState("closed")},r.prototype._updateSignalingState=function(e){this.signalingState=e;var t=new Event("signalingstatechange");this.dispatchEvent(t),null!==this.onsignalingstatechange&&this.onsignalingstatechange(t)},r.prototype._maybeFireNegotiationNeeded=function(){var t=this;"stable"===this.signalingState&&!0!==this.needNegotiation&&(this.needNegotiation=!0,e.setTimeout(function(){if(!1!==t.needNegotiation){t.needNegotiation=!1;var e=new Event("negotiationneeded");t.dispatchEvent(e),null!==t.onnegotiationneeded&&t.onnegotiationneeded(e)}},0))},r.prototype._updateConnectionState=function(){var e,t=this,r={new:0,closed:0,connecting:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};if(this.transceivers.forEach(function(e){r[e.iceTransport.state]++,r[e.dtlsTransport.state]++}),r.connected+=r.completed,e="new",r.failed>0?e="failed":r.connecting>0||r.checking>0?e="connecting":r.disconnected>0?e="disconnected":r.new>0?e="new":(r.connected>0||r.completed>0)&&(e="connected"),e!==t.iceConnectionState){t.iceConnectionState=e;var n=new Event("iceconnectionstatechange");this.dispatchEvent(n),null!==this.oniceconnectionstatechange&&this.oniceconnectionstatechange(n)}},r.prototype.createOffer=function(){var r,i=this,a=arguments;1===arguments.length&&"function"!=typeof arguments[0]?r=arguments[0]:3===arguments.length&&(r=arguments[2]);var o=this.transceivers.filter(function(e){return"audio"===e.kind}).length,s=this.transceivers.filter(function(e){return"video"===e.kind}).length;if(r){if(r.mandatory||r.optional)throw new TypeError("Legacy mandatory/optional constraints not supported.");void 0!==r.offerToReceiveAudio&&(o=!0===r.offerToReceiveAudio?1:!1===r.offerToReceiveAudio?0:r.offerToReceiveAudio),void 0!==r.offerToReceiveVideo&&(s=!0===r.offerToReceiveVideo?1:!1===r.offerToReceiveVideo?0:r.offerToReceiveVideo)}for(this.transceivers.forEach(function(e){"audio"===e.kind?--o<0&&(e.wantReceive=!1):"video"===e.kind&&--s<0&&(e.wantReceive=!1)});o>0||s>0;)o>0&&(this._createTransceiver("audio"),o--),s>0&&(this._createTransceiver("video"),s--);var d=c.writeSessionBoilerplate(this._sdpSessionId,this._sdpSessionVersion++);this.transceivers.forEach(function(r,n){var a=r.track,o=r.kind,s=c.generateIdentifier();r.mid=s,r.iceGatherer||(r.iceGatherer=i._createIceGatherer(n,i.usingBundle));var d=e.RTCRtpSender.getCapabilities(o);t<15019&&(d.codecs=d.codecs.filter(function(e){return"rtx"!==e.name})),d.codecs.forEach(function(e){"H264"===e.name&&void 0===e.parameters["level-asymmetry-allowed"]&&(e.parameters["level-asymmetry-allowed"]="1")});var p=[{ssrc:1001*(2*n+1)}];a&&t>=15019&&"video"===o&&(p[0].rtx={ssrc:1001*(2*n+1)+1}),r.wantReceive&&(r.rtpReceiver=new e.RTCRtpReceiver(r.dtlsTransport,o)),r.localCapabilities=d,r.sendEncodingParameters=p}),"max-compat"!==this._config.bundlePolicy&&(d+="a=group:BUNDLE "+this.transceivers.map(function(e){return e.mid}).join(" ")+"\r\n"),d+="a=ice-options:trickle\r\n",this.transceivers.forEach(function(e,t){d+=n(e,e.localCapabilities,"offer",e.stream),d+="a=rtcp-rsize\r\n",!e.iceGatherer||"new"===i.iceGatheringState||0!==t&&i.usingBundle||(e.iceGatherer.getLocalCandidates().forEach(function(e){e.component=1,d+="a="+c.writeCandidate(e)+"\r\n"}),"completed"===e.iceGatherer.state&&(d+="a=end-of-candidates\r\n"))});var p=new e.RTCSessionDescription({type:"offer",sdp:d});return new Promise(function(e){if(a.length>0&&"function"==typeof a[0])return a[0].apply(null,[p]),void e();e(p)})},r.prototype.createAnswer=function(){var r=arguments,i=c.writeSessionBoilerplate(this._sdpSessionId,this._sdpSessionVersion++);this.usingBundle&&(i+="a=group:BUNDLE "+this.transceivers.map(function(e){return e.mid}).join(" ")+"\r\n");var o=c.splitSections(this.remoteDescription.sdp).length-1;this.transceivers.forEach(function(e,r){if(!(r+1>o)){if(e.isDatachannel)return void(i+="m=application 0 DTLS/SCTP 5000\r\nc=IN IP4 0.0.0.0\r\na=mid:"+e.mid+"\r\n");if(e.stream){var s;"audio"===e.kind?s=e.stream.getAudioTracks()[0]:"video"===e.kind&&(s=e.stream.getVideoTracks()[0]),s&&t>=15019&&"video"===e.kind&&(e.sendEncodingParameters[0].rtx={ssrc:1001*(2*r+2)+1})}var c=a(e.localCapabilities,e.remoteCapabilities);!c.codecs.filter(function(e){return"rtx"===e.name.toLowerCase()}).length&&e.sendEncodingParameters[0].rtx&&delete e.sendEncodingParameters[0].rtx,i+=n(e,c,"answer",e.stream),e.rtcpParameters&&e.rtcpParameters.reducedSize&&(i+="a=rtcp-rsize\r\n")}});var s=new e.RTCSessionDescription({type:"answer",sdp:i});return new Promise(function(e){if(r.length>0&&"function"==typeof r[0])return r[0].apply(null,[s]),void e();e(s)})},r.prototype.addIceCandidate=function(e){var t,r;if(e&&""!==e.candidate){if(!e.sdpMLineIndex&&!e.sdpMid)throw new TypeError("sdpMLineIndex or sdpMid required");if(this.remoteDescription){var n=e.sdpMLineIndex;if(e.sdpMid)for(var i=0;i<this.transceivers.length;i++)if(this.transceivers[i].mid===e.sdpMid){n=i;break}var a=this.transceivers[n];if(a){if(a.isDatachannel)return Promise.resolve();var o=Object.keys(e.candidate).length>0?c.parseCandidate(e.candidate):{};if("tcp"===o.protocol&&(0===o.port||9===o.port))return Promise.resolve();if(o.component&&1!==o.component)return Promise.resolve();(0===n||n>0&&a.iceTransport!==this.transceivers[0].iceTransport)&&a.iceTransport.addRemoteCandidate(o);var s=e.candidate.trim();0===s.indexOf("a=")&&(s=s.substr(2)),r=c.splitSections(this.remoteDescription.sdp),r[n+1]+="a="+(o.type?s:"end-of-candidates")+"\r\n",this.remoteDescription.sdp=r.join("")}else t=new Error("Can not add ICE candidate"),t.name="OperationError"}else t=new Error("Can not add ICE candidate without a remote description"),t.name="InvalidStateError"}else for(var d=0;d<this.transceivers.length&&(this.transceivers[d].isDatachannel||(this.transceivers[d].iceTransport.addRemoteCandidate({}),r=c.splitSections(this.remoteDescription.sdp),r[d+1]+="a=end-of-candidates\r\n",this.remoteDescription.sdp=r.join(""),!this.usingBundle));d++);var p=arguments;return new Promise(function(e,r){t?(p.length>2&&"function"==typeof p[2]&&p[2].apply(null,[t]),r(t)):(p.length>1&&"function"==typeof p[1]&&p[1].apply(null),e())})},r.prototype.getStats=function(){var e=[];this.transceivers.forEach(function(t){["rtpSender","rtpReceiver","iceGatherer","iceTransport","dtlsTransport"].forEach(function(r){t[r]&&e.push(t[r].getStats())})});var t=arguments.length>1&&"function"==typeof arguments[1]&&arguments[1],r=function(e){return{inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[e.type]||e.type};return new Promise(function(n){var i=new Map;Promise.all(e).then(function(e){e.forEach(function(e){Object.keys(e).forEach(function(t){e[t].type=r(e[t]),i.set(t,e[t])})}),t&&t.apply(null,i),n(i)})})},r}},{sdp:2}],2:[function(e,t,r){"use strict";var n={};n.generateIdentifier=function(){return Math.random().toString(36).substr(2,10)},n.localCName=n.generateIdentifier(),n.splitLines=function(e){return e.trim().split("\n").map(function(e){return e.trim()})},n.splitSections=function(e){return e.split("\nm=").map(function(e,t){return(t>0?"m="+e:e).trim()+"\r\n"})},n.matchPrefix=function(e,t){return n.splitLines(e).filter(function(e){return 0===e.indexOf(t)})},n.parseCandidate=function(e){var t;t=0===e.indexOf("a=candidate:")?e.substring(12).split(" "):e.substring(10).split(" ");for(var r={foundation:t[0],component:parseInt(t[1],10),protocol:t[2].toLowerCase(),priority:parseInt(t[3],10),ip:t[4],port:parseInt(t[5],10),type:t[7]},n=8;n<t.length;n+=2)switch(t[n]){case"raddr":r.relatedAddress=t[n+1];break;case"rport":r.relatedPort=parseInt(t[n+1],10);break;case"tcptype":r.tcpType=t[n+1];break;case"ufrag":r.ufrag=t[n+1],r.usernameFragment=t[n+1];break;default:r[t[n]]=t[n+1]}return r},n.writeCandidate=function(e){var t=[];t.push(e.foundation),t.push(e.component),t.push(e.protocol.toUpperCase()),t.push(e.priority),t.push(e.ip),t.push(e.port);var r=e.type;return t.push("typ"),t.push(r),"host"!==r&&e.relatedAddress&&e.relatedPort&&(t.push("raddr"),t.push(e.relatedAddress),t.push("rport"),t.push(e.relatedPort)),e.tcpType&&"tcp"===e.protocol.toLowerCase()&&(t.push("tcptype"),t.push(e.tcpType)),e.ufrag&&(t.push("ufrag"),t.push(e.ufrag)),"candidate:"+t.join(" ")},n.parseIceOptions=function(e){return e.substr(14).split(" ")},n.parseRtpMap=function(e){var t=e.substr(9).split(" "),r={payloadType:parseInt(t.shift(),10)};return t=t[0].split("/"),r.name=t[0],r.clockRate=parseInt(t[1],10),r.numChannels=3===t.length?parseInt(t[2],10):1,r},n.writeRtpMap=function(e){var t=e.payloadType;return void 0!==e.preferredPayloadType&&(t=e.preferredPayloadType),"a=rtpmap:"+t+" "+e.name+"/"+e.clockRate+(1!==e.numChannels?"/"+e.numChannels:"")+"\r\n"},n.parseExtmap=function(e){var t=e.substr(9).split(" ");return{id:parseInt(t[0],10),direction:t[0].indexOf("/")>0?t[0].split("/")[1]:"sendrecv",uri:t[1]}},n.writeExtmap=function(e){return"a=extmap:"+(e.id||e.preferredId)+(e.direction&&"sendrecv"!==e.direction?"/"+e.direction:"")+" "+e.uri+"\r\n"},n.parseFmtp=function(e){for(var t,r={},n=e.substr(e.indexOf(" ")+1).split(";"),i=0;i<n.length;i++)t=n[i].trim().split("="),r[t[0].trim()]=t[1];return r},n.writeFmtp=function(e){var t="",r=e.payloadType;if(void 0!==e.preferredPayloadType&&(r=e.preferredPayloadType),e.parameters&&Object.keys(e.parameters).length){var n=[];Object.keys(e.parameters).forEach(function(t){n.push(t+"="+e.parameters[t])}),t+="a=fmtp:"+r+" "+n.join(";")+"\r\n"}return t},n.parseRtcpFb=function(e){var t=e.substr(e.indexOf(" ")+1).split(" ");return{type:t.shift(),parameter:t.join(" ")}},n.writeRtcpFb=function(e){var t="",r=e.payloadType;return void 0!==e.preferredPayloadType&&(r=e.preferredPayloadType),e.rtcpFeedback&&e.rtcpFeedback.length&&e.rtcpFeedback.forEach(function(e){t+="a=rtcp-fb:"+r+" "+e.type+(e.parameter&&e.parameter.length?" "+e.parameter:"")+"\r\n"}),t},n.parseSsrcMedia=function(e){var t=e.indexOf(" "),r={ssrc:parseInt(e.substr(7,t-7),10)},n=e.indexOf(":",t);return n>-1?(r.attribute=e.substr(t+1,n-t-1),r.value=e.substr(n+1)):r.attribute=e.substr(t+1),r},n.getMid=function(e){var t=n.matchPrefix(e,"a=mid:")[0];if(t)return t.substr(6)},n.parseFingerprint=function(e){var t=e.substr(14).split(" ");return{algorithm:t[0].toLowerCase(),value:t[1]}},n.getDtlsParameters=function(e,t){return{role:"auto",fingerprints:n.matchPrefix(e+t,"a=fingerprint:").map(n.parseFingerprint)}},n.writeDtlsParameters=function(e,t){var r="a=setup:"+t+"\r\n";return e.fingerprints.forEach(function(e){r+="a=fingerprint:"+e.algorithm+" "+e.value+"\r\n"}),r},n.getIceParameters=function(e,t){var r=n.splitLines(e);return r=r.concat(n.splitLines(t)),{usernameFragment:r.filter(function(e){return 0===e.indexOf("a=ice-ufrag:")})[0].substr(12),password:r.filter(function(e){return 0===e.indexOf("a=ice-pwd:")})[0].substr(10)}},n.writeIceParameters=function(e){return"a=ice-ufrag:"+e.usernameFragment+"\r\na=ice-pwd:"+e.password+"\r\n"},n.parseRtpParameters=function(e){for(var t={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},r=n.splitLines(e),i=r[0].split(" "),a=3;a<i.length;a++){var o=i[a],s=n.matchPrefix(e,"a=rtpmap:"+o+" ")[0];if(s){var c=n.parseRtpMap(s),d=n.matchPrefix(e,"a=fmtp:"+o+" ");switch(c.parameters=d.length?n.parseFmtp(d[0]):{},c.rtcpFeedback=n.matchPrefix(e,"a=rtcp-fb:"+o+" ").map(n.parseRtcpFb),t.codecs.push(c),c.name.toUpperCase()){case"RED":case"ULPFEC":t.fecMechanisms.push(c.name.toUpperCase())}}}return n.matchPrefix(e,"a=extmap:").forEach(function(e){t.headerExtensions.push(n.parseExtmap(e))}),t},n.writeRtpDescription=function(e,t){var r="";r+="m="+e+" ",r+=t.codecs.length>0?"9":"0",r+=" UDP/TLS/RTP/SAVPF ",r+=t.codecs.map(function(e){return void 0!==e.preferredPayloadType?e.preferredPayloadType:e.payloadType}).join(" ")+"\r\n",r+="c=IN IP4 0.0.0.0\r\n",r+="a=rtcp:9 IN IP4 0.0.0.0\r\n",t.codecs.forEach(function(e){r+=n.writeRtpMap(e),r+=n.writeFmtp(e),r+=n.writeRtcpFb(e)});var i=0;return t.codecs.forEach(function(e){e.maxptime>i&&(i=e.maxptime)}),i>0&&(r+="a=maxptime:"+i+"\r\n"),r+="a=rtcp-mux\r\n",t.headerExtensions.forEach(function(e){r+=n.writeExtmap(e)}),r},n.parseRtpEncodingParameters=function(e){var t,r=[],i=n.parseRtpParameters(e),a=-1!==i.fecMechanisms.indexOf("RED"),o=-1!==i.fecMechanisms.indexOf("ULPFEC"),s=n.matchPrefix(e,"a=ssrc:").map(function(e){return n.parseSsrcMedia(e)}).filter(function(e){return"cname"===e.attribute}),c=s.length>0&&s[0].ssrc,d=n.matchPrefix(e,"a=ssrc-group:FID").map(function(e){var t=e.split(" ");return t.shift(),t.map(function(e){return parseInt(e,10)})});d.length>0&&d[0].length>1&&d[0][0]===c&&(t=d[0][1]),i.codecs.forEach(function(e){if("RTX"===e.name.toUpperCase()&&e.parameters.apt){var n={ssrc:c,codecPayloadType:parseInt(e.parameters.apt,10),rtx:{ssrc:t}};r.push(n),a&&(n=JSON.parse(JSON.stringify(n)),n.fec={ssrc:t,mechanism:o?"red+ulpfec":"red"},r.push(n))}}),0===r.length&&c&&r.push({ssrc:c});var p=n.matchPrefix(e,"b=");return p.length&&(p=0===p[0].indexOf("b=TIAS:")?parseInt(p[0].substr(7),10):0===p[0].indexOf("b=AS:")?1e3*parseInt(p[0].substr(5),10)*.95-16e3:void 0,r.forEach(function(e){e.maxBitrate=p})),r},n.parseRtcpParameters=function(e){var t={},r=n.matchPrefix(e,"a=ssrc:").map(function(e){return n.parseSsrcMedia(e)}).filter(function(e){return"cname"===e.attribute})[0];r&&(t.cname=r.value,t.ssrc=r.ssrc);var i=n.matchPrefix(e,"a=rtcp-rsize");t.reducedSize=i.length>0,t.compound=0===i.length;var a=n.matchPrefix(e,"a=rtcp-mux");return t.mux=a.length>0,t},n.parseMsid=function(e){var t,r=n.matchPrefix(e,"a=msid:");if(1===r.length)return t=r[0].substr(7).split(" "),{stream:t[0],track:t[1]};var i=n.matchPrefix(e,"a=ssrc:").map(function(e){return n.parseSsrcMedia(e)}).filter(function(e){return"msid"===e.attribute});return i.length>0?(t=i[0].value.split(" "),{stream:t[0],track:t[1]}):void 0},n.generateSessionId=function(){return Math.random().toString().substr(2,21)},n.writeSessionBoilerplate=function(e,t){var r=void 0!==t?t:2;return"v=0\r\no=thisisadapterortc "+(e||n.generateSessionId())+" "+r+" IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n"},n.writeMediaSection=function(e,t,r,i){var a=n.writeRtpDescription(e.kind,t);if(a+=n.writeIceParameters(e.iceGatherer.getLocalParameters()),a+=n.writeDtlsParameters(e.dtlsTransport.getLocalParameters(),"offer"===r?"actpass":"active"),a+="a=mid:"+e.mid+"\r\n",e.direction?a+="a="+e.direction+"\r\n":e.rtpSender&&e.rtpReceiver?a+="a=sendrecv\r\n":e.rtpSender?a+="a=sendonly\r\n":e.rtpReceiver?a+="a=recvonly\r\n":a+="a=inactive\r\n",e.rtpSender){var o="msid:"+i.id+" "+e.rtpSender.track.id+"\r\n";a+="a="+o,
a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" "+o,e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" "+o,a+="a=ssrc-group:FID "+e.sendEncodingParameters[0].ssrc+" "+e.sendEncodingParameters[0].rtx.ssrc+"\r\n")}return a+="a=ssrc:"+e.sendEncodingParameters[0].ssrc+" cname:"+n.localCName+"\r\n",e.rtpSender&&e.sendEncodingParameters[0].rtx&&(a+="a=ssrc:"+e.sendEncodingParameters[0].rtx.ssrc+" cname:"+n.localCName+"\r\n"),a},n.getDirection=function(e,t){for(var r=n.splitLines(e),i=0;i<r.length;i++)switch(r[i]){case"a=sendrecv":case"a=sendonly":case"a=recvonly":case"a=inactive":return r[i].substr(2)}return t?n.getDirection(t):"sendrecv"},n.getKind=function(e){return n.splitLines(e)[0].split(" ")[0].substr(2)},n.isRejected=function(e){return"0"===e.split(" ",2)[1]},t.exports=n},{}],3:[function(e,t,r){(function(r){"use strict";var n=e("./adapter_factory.js");t.exports=n({window:r.window})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./adapter_factory.js":4}],4:[function(e,t,r){"use strict";var n=e("./utils");t.exports=function(t,r){var i=t&&t.window,a={shimChrome:!0,shimFirefox:!0,shimEdge:!0,shimSafari:!0};for(var o in r)hasOwnProperty.call(r,o)&&(a[o]=r[o]);var s=n.log,c=n.detectBrowser(i),d={browserDetails:c,extractVersion:n.extractVersion,disableLog:n.disableLog,disableWarnings:n.disableWarnings},p=e("./chrome/chrome_shim")||null,u=e("./edge/edge_shim")||null,l=e("./firefox/firefox_shim")||null,f=e("./safari/safari_shim")||null,m=e("./common_shim")||null;switch(c.browser){case"chrome":if(!p||!p.shimPeerConnection||!a.shimChrome)return s("Chrome shim is not included in this adapter release."),d;s("adapter.js shimming chrome."),d.browserShim=p,m.shimCreateObjectURL(i),p.shimGetUserMedia(i),p.shimMediaStream(i),p.shimSourceObject(i),p.shimPeerConnection(i),p.shimOnTrack(i),p.shimAddTrackRemoveTrack(i),p.shimGetSendersWithDtmf(i),m.shimRTCIceCandidate(i);break;case"firefox":if(!l||!l.shimPeerConnection||!a.shimFirefox)return s("Firefox shim is not included in this adapter release."),d;s("adapter.js shimming firefox."),d.browserShim=l,m.shimCreateObjectURL(i),l.shimGetUserMedia(i),l.shimSourceObject(i),l.shimPeerConnection(i),l.shimOnTrack(i),m.shimRTCIceCandidate(i);break;case"edge":if(!u||!u.shimPeerConnection||!a.shimEdge)return s("MS edge shim is not included in this adapter release."),d;s("adapter.js shimming edge."),d.browserShim=u,m.shimCreateObjectURL(i),u.shimGetUserMedia(i),u.shimPeerConnection(i),u.shimReplaceTrack(i);break;case"safari":if(!f||!a.shimSafari)return s("Safari shim is not included in this adapter release."),d;s("adapter.js shimming safari."),d.browserShim=f,m.shimCreateObjectURL(i),f.shimRTCIceServerUrls(i),f.shimCallbacksAPI(i),f.shimLocalStreamsAPI(i),f.shimRemoteStreamsAPI(i),f.shimTrackEventTransceiver(i),f.shimGetUserMedia(i),m.shimRTCIceCandidate(i);break;default:s("Unsupported browser!")}return d}},{"./chrome/chrome_shim":5,"./common_shim":7,"./edge/edge_shim":8,"./firefox/firefox_shim":10,"./safari/safari_shim":12,"./utils":13}],5:[function(e,t,r){"use strict";var n=e("../utils.js"),i=n.log,a={shimMediaStream:function(e){e.MediaStream=e.MediaStream||e.webkitMediaStream},shimOnTrack:function(e){if("object"==typeof e&&e.RTCPeerConnection&&!("ontrack"in e.RTCPeerConnection.prototype)){Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get:function(){return this._ontrack},set:function(e){this._ontrack&&this.removeEventListener("track",this._ontrack),this.addEventListener("track",this._ontrack=e)}});var t=e.RTCPeerConnection.prototype.setRemoteDescription;e.RTCPeerConnection.prototype.setRemoteDescription=function(){var r=this;return r._ontrackpoly||(r._ontrackpoly=function(t){t.stream.addEventListener("addtrack",function(n){var i;i=e.RTCPeerConnection.prototype.getReceivers?r.getReceivers().find(function(e){return e.track&&e.track.id===n.track.id}):{track:n.track};var a=new Event("track");a.track=n.track,a.receiver=i,a.transceiver={receiver:i},a.streams=[t.stream],r.dispatchEvent(a)}),t.stream.getTracks().forEach(function(n){var i;i=e.RTCPeerConnection.prototype.getReceivers?r.getReceivers().find(function(e){return e.track&&e.track.id===n.id}):{track:n};var a=new Event("track");a.track=n,a.receiver=i,a.transceiver={receiver:i},a.streams=[t.stream],r.dispatchEvent(a)})},r.addEventListener("addstream",r._ontrackpoly)),t.apply(r,arguments)}}},shimGetSendersWithDtmf:function(e){if("object"==typeof e&&e.RTCPeerConnection&&!("getSenders"in e.RTCPeerConnection.prototype)&&"createDTMFSender"in e.RTCPeerConnection.prototype){var t=function(e,t){return{track:t,get dtmf(){return void 0===this._dtmf&&("audio"===t.kind?this._dtmf=e.createDTMFSender(t):this._dtmf=null),this._dtmf},_pc:e}};if(!e.RTCPeerConnection.prototype.getSenders){e.RTCPeerConnection.prototype.getSenders=function(){return this._senders=this._senders||[],this._senders.slice()};var r=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addTrack=function(e,n){var i=this,a=r.apply(i,arguments);return a||(a=t(i,e),i._senders.push(a)),a};var n=e.RTCPeerConnection.prototype.removeTrack;e.RTCPeerConnection.prototype.removeTrack=function(e){var t=this;n.apply(t,arguments);var r=t._senders.indexOf(e);-1!==r&&t._senders.splice(r,1)}}var i=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(e){var r=this;r._senders=r._senders||[],i.apply(r,[e]),e.getTracks().forEach(function(e){r._senders.push(t(r,e))})};var a=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){var t=this;t._senders=t._senders||[],a.apply(t,[t._streams[e.id]||e]),e.getTracks().forEach(function(e){var r=t._senders.find(function(t){return t.track===e});r&&t._senders.splice(t._senders.indexOf(r),1)})}}else if("object"==typeof e&&e.RTCPeerConnection&&"getSenders"in e.RTCPeerConnection.prototype&&"createDTMFSender"in e.RTCPeerConnection.prototype&&e.RTCRtpSender&&!("dtmf"in e.RTCRtpSender.prototype)){var o=e.RTCPeerConnection.prototype.getSenders;e.RTCPeerConnection.prototype.getSenders=function(){var e=this,t=o.apply(e,[]);return t.forEach(function(t){t._pc=e}),t},Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get:function(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=this._pc.createDTMFSender(this.track):this._dtmf=null),this._dtmf}})}},shimSourceObject:function(e){var t=e&&e.URL;"object"==typeof e&&(!e.HTMLMediaElement||"srcObject"in e.HTMLMediaElement.prototype||Object.defineProperty(e.HTMLMediaElement.prototype,"srcObject",{get:function(){return this._srcObject},set:function(e){var r=this;if(this._srcObject=e,this.src&&t.revokeObjectURL(this.src),!e)return void(this.src="");this.src=t.createObjectURL(e),e.addEventListener("addtrack",function(){r.src&&t.revokeObjectURL(r.src),r.src=t.createObjectURL(e)}),e.addEventListener("removetrack",function(){r.src&&t.revokeObjectURL(r.src),r.src=t.createObjectURL(e)})}}))},shimAddTrackRemoveTrack:function(e){function t(e,t){var r=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(function(t){var n=e._reverseStreams[t],i=e._streams[n.id];r=r.replace(new RegExp(i.id,"g"),n.id)}),new RTCSessionDescription({type:t.type,sdp:r})}function r(e,t){var r=t.sdp;return Object.keys(e._reverseStreams||[]).forEach(function(t){var n=e._reverseStreams[t],i=e._streams[n.id];r=r.replace(new RegExp(n.id,"g"),i.id)}),new RTCSessionDescription({type:t.type,sdp:r})}if(!e.RTCPeerConnection.prototype.addTrack){var n=e.RTCPeerConnection.prototype.getLocalStreams;e.RTCPeerConnection.prototype.getLocalStreams=function(){var e=this,t=n.apply(this);return e._reverseStreams=e._reverseStreams||{},t.map(function(t){return e._reverseStreams[t.id]})};var i=e.RTCPeerConnection.prototype.addStream;e.RTCPeerConnection.prototype.addStream=function(t){var r=this;if(r._streams=r._streams||{},r._reverseStreams=r._reverseStreams||{},t.getTracks().forEach(function(e){if(r.getSenders().find(function(t){return t.track===e}))throw new DOMException("Track already exists.","InvalidAccessError")}),!r._reverseStreams[t.id]){var n=new e.MediaStream(t.getTracks());r._streams[t.id]=n,r._reverseStreams[n.id]=t,t=n}i.apply(r,[t])};var a=e.RTCPeerConnection.prototype.removeStream;e.RTCPeerConnection.prototype.removeStream=function(e){var t=this;t._streams=t._streams||{},t._reverseStreams=t._reverseStreams||{},a.apply(t,[t._streams[e.id]||e]),delete t._reverseStreams[t._streams[e.id]?t._streams[e.id].id:e.id],delete t._streams[e.id]},e.RTCPeerConnection.prototype.addTrack=function(t,r){var n=this;if("closed"===n.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");var i=[].slice.call(arguments,1);if(1!==i.length||!i[0].getTracks().find(function(e){return e===t}))throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.","NotSupportedError");if(n.getSenders().find(function(e){return e.track===t}))throw new DOMException("Track already exists.","InvalidAccessError");n._streams=n._streams||{},n._reverseStreams=n._reverseStreams||{};var a=n._streams[r.id];if(a)a.addTrack(t),Promise.resolve().then(function(){n.dispatchEvent(new Event("negotiationneeded"))});else{var o=new e.MediaStream([t]);n._streams[r.id]=o,n._reverseStreams[o.id]=r,n.addStream(o)}return n.getSenders().find(function(e){return e.track===t})},["createOffer","createAnswer"].forEach(function(r){var n=e.RTCPeerConnection.prototype[r];e.RTCPeerConnection.prototype[r]=function(){var e=this,r=arguments;return arguments.length&&"function"==typeof arguments[0]?n.apply(e,[function(n){var i=t(e,n);r[0].apply(null,[i])},function(e){r[1]&&r[1].apply(null,e)},arguments[2]]):n.apply(e,arguments).then(function(r){return t(e,r)})}});var o=e.RTCPeerConnection.prototype.setLocalDescription;e.RTCPeerConnection.prototype.setLocalDescription=function(){var e=this;return arguments.length&&arguments[0].type?(arguments[0]=r(e,arguments[0]),o.apply(e,arguments)):o.apply(e,arguments)};var s=Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype,"localDescription");Object.defineProperty(e.RTCPeerConnection.prototype,"localDescription",{get:function(){var e=this,r=s.get.apply(this);return""===r.type?r:t(e,r)}}),e.RTCPeerConnection.prototype.removeTrack=function(e){var t=this;if("closed"===t.signalingState)throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.","InvalidStateError");if(!e._pc)throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.","TypeError");if(e._pc!==t)throw new DOMException("Sender was not created by this connection.","InvalidAccessError");t._streams=t._streams||{};var r;Object.keys(t._streams).forEach(function(n){t._streams[n].getTracks().find(function(t){return e.track===t})&&(r=t._streams[n])}),r&&(1===r.getTracks().length?t.removeStream(r):r.removeTrack(e.track),t.dispatchEvent(new Event("negotiationneeded")))}}},shimPeerConnection:function(e){var t=n.detectBrowser(e);if(e.RTCPeerConnection){var r=e.RTCPeerConnection;e.RTCPeerConnection=function(e,t){if(e&&e.iceServers){for(var i=[],a=0;a<e.iceServers.length;a++){var o=e.iceServers[a];!o.hasOwnProperty("urls")&&o.hasOwnProperty("url")?(n.deprecated("RTCIceServer.url","RTCIceServer.urls"),o=JSON.parse(JSON.stringify(o)),o.urls=o.url,i.push(o)):i.push(e.iceServers[a])}e.iceServers=i}return new r(e,t)},e.RTCPeerConnection.prototype=r.prototype,Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:function(){return r.generateCertificate}})}else e.RTCPeerConnection=function(t,r){return i("PeerConnection"),t&&t.iceTransportPolicy&&(t.iceTransports=t.iceTransportPolicy),new e.webkitRTCPeerConnection(t,r)},e.RTCPeerConnection.prototype=e.webkitRTCPeerConnection.prototype,e.webkitRTCPeerConnection.generateCertificate&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:function(){return e.webkitRTCPeerConnection.generateCertificate}});var a=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(e,t,r){var n=this,i=arguments;if(arguments.length>0&&"function"==typeof e)return a.apply(this,arguments);if(0===a.length&&(0===arguments.length||"function"!=typeof arguments[0]))return a.apply(this,[]);var o=function(e){var t={};return e.result().forEach(function(e){var r={id:e.id,timestamp:e.timestamp,type:{localcandidate:"local-candidate",remotecandidate:"remote-candidate"}[e.type]||e.type};e.names().forEach(function(t){r[t]=e.stat(t)}),t[r.id]=r}),t},s=function(e){return new Map(Object.keys(e).map(function(t){return[t,e[t]]}))};if(arguments.length>=2){var c=function(e){i[1](s(o(e)))};return a.apply(this,[c,arguments[0]])}return new Promise(function(e,t){a.apply(n,[function(t){e(s(o(t)))},t])}).then(t,r)},t.version<51&&["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(t){var r=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){var e=arguments,t=this,n=new Promise(function(n,i){r.apply(t,[e[0],n,i])});return e.length<2?n:n.then(function(){e[1].apply(null,[])},function(t){e.length>=3&&e[2].apply(null,[t])})}}),t.version<52&&["createOffer","createAnswer"].forEach(function(t){var r=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){var e=this;if(arguments.length<1||1===arguments.length&&"object"==typeof arguments[0]){var t=1===arguments.length?arguments[0]:void 0;return new Promise(function(n,i){r.apply(e,[n,i,t])})}return r.apply(this,arguments)}}),["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(t){var r=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),r.apply(this,arguments)}});var o=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?o.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())}}};t.exports={shimMediaStream:a.shimMediaStream,shimOnTrack:a.shimOnTrack,shimAddTrackRemoveTrack:a.shimAddTrackRemoveTrack,shimGetSendersWithDtmf:a.shimGetSendersWithDtmf,shimSourceObject:a.shimSourceObject,shimPeerConnection:a.shimPeerConnection,shimGetUserMedia:e("./getusermedia")}},{"../utils.js":13,"./getusermedia":6}],6:[function(e,t,r){"use strict";var n=e("../utils.js"),i=n.log;t.exports=function(e){var t=n.detectBrowser(e),r=e&&e.navigator,a=function(e){if("object"!=typeof e||e.mandatory||e.optional)return e;var t={};return Object.keys(e).forEach(function(r){if("require"!==r&&"advanced"!==r&&"mediaSource"!==r){var n="object"==typeof e[r]?e[r]:{ideal:e[r]};void 0!==n.exact&&"number"==typeof n.exact&&(n.min=n.max=n.exact);var i=function(e,t){return e?e+t.charAt(0).toUpperCase()+t.slice(1):"deviceId"===t?"sourceId":t};if(void 0!==n.ideal){t.optional=t.optional||[];var a={};"number"==typeof n.ideal?(a[i("min",r)]=n.ideal,t.optional.push(a),a={},a[i("max",r)]=n.ideal,t.optional.push(a)):(a[i("",r)]=n.ideal,t.optional.push(a))}void 0!==n.exact&&"number"!=typeof n.exact?(t.mandatory=t.mandatory||{},t.mandatory[i("",r)]=n.exact):["min","max"].forEach(function(e){void 0!==n[e]&&(t.mandatory=t.mandatory||{},t.mandatory[i(e,r)]=n[e])})}}),e.advanced&&(t.optional=(t.optional||[]).concat(e.advanced)),t},o=function(e,n){if((e=JSON.parse(JSON.stringify(e)))&&"object"==typeof e.audio){var o=function(e,t,r){t in e&&!(r in e)&&(e[r]=e[t],delete e[t])};e=JSON.parse(JSON.stringify(e)),o(e.audio,"autoGainControl","googAutoGainControl"),o(e.audio,"noiseSuppression","googNoiseSuppression"),e.audio=a(e.audio)}if(e&&"object"==typeof e.video){var s=e.video.facingMode;s=s&&("object"==typeof s?s:{ideal:s});var c=t.version<61;if(s&&("user"===s.exact||"environment"===s.exact||"user"===s.ideal||"environment"===s.ideal)&&(!r.mediaDevices.getSupportedConstraints||!r.mediaDevices.getSupportedConstraints().facingMode||c)){delete e.video.facingMode;var d;if("environment"===s.exact||"environment"===s.ideal?d=["back","rear"]:"user"!==s.exact&&"user"!==s.ideal||(d=["front"]),d)return r.mediaDevices.enumerateDevices().then(function(t){t=t.filter(function(e){return"videoinput"===e.kind});var r=t.find(function(e){return d.some(function(t){return-1!==e.label.toLowerCase().indexOf(t)})});return!r&&t.length&&-1!==d.indexOf("back")&&(r=t[t.length-1]),r&&(e.video.deviceId=s.exact?{exact:r.deviceId}:{ideal:r.deviceId}),e.video=a(e.video),i("chrome: "+JSON.stringify(e)),n(e)})}e.video=a(e.video)}return i("chrome: "+JSON.stringify(e)),n(e)},s=function(e){return{name:{PermissionDeniedError:"NotAllowedError",InvalidStateError:"NotReadableError",DevicesNotFoundError:"NotFoundError",ConstraintNotSatisfiedError:"OverconstrainedError",TrackStartError:"NotReadableError",MediaDeviceFailedDueToShutdown:"NotReadableError",MediaDeviceKillSwitchOn:"NotReadableError"}[e.name]||e.name,message:e.message,constraint:e.constraintName,toString:function(){return this.name+(this.message&&": ")+this.message}}},c=function(e,t,n){o(e,function(e){r.webkitGetUserMedia(e,t,function(e){n&&n(s(e))})})};r.getUserMedia=c;var d=function(e){return new Promise(function(t,n){r.getUserMedia(e,t,n)})};if(r.mediaDevices||(r.mediaDevices={getUserMedia:d,enumerateDevices:function(){return new Promise(function(t){var r={audio:"audioinput",video:"videoinput"};return e.MediaStreamTrack.getSources(function(e){t(e.map(function(e){return{label:e.label,kind:r[e.kind],deviceId:e.id,groupId:""}}))})})},getSupportedConstraints:function(){return{deviceId:!0,echoCancellation:!0,facingMode:!0,frameRate:!0,height:!0,width:!0}}}),r.mediaDevices.getUserMedia){var p=r.mediaDevices.getUserMedia.bind(r.mediaDevices);r.mediaDevices.getUserMedia=function(e){return o(e,function(e){return p(e).then(function(t){if(e.audio&&!t.getAudioTracks().length||e.video&&!t.getVideoTracks().length)throw t.getTracks().forEach(function(e){e.stop()}),new DOMException("","NotFoundError");return t},function(e){return Promise.reject(s(e))})})}}else r.mediaDevices.getUserMedia=function(e){return d(e)};void 0===r.mediaDevices.addEventListener&&(r.mediaDevices.addEventListener=function(){i("Dummy mediaDevices.addEventListener called.")}),void 0===r.mediaDevices.removeEventListener&&(r.mediaDevices.removeEventListener=function(){i("Dummy mediaDevices.removeEventListener called.")})}},{"../utils.js":13}],7:[function(e,t,r){"use strict";function n(e,t,r){if(e.RTCPeerConnection){var n=e.RTCPeerConnection.prototype,i=n.addEventListener;n.addEventListener=function(e,n){if(e!==t)return i.apply(this,arguments);var a=function(e){n(r(e))};return this._eventMap=this._eventMap||{},this._eventMap[n]=a,i.apply(this,[e,a])};var a=n.removeEventListener;n.removeEventListener=function(e,r){if(e!==t||!this._eventMap||!this._eventMap[r])return a.apply(this,arguments);var n=this._eventMap[r];return delete this._eventMap[r],a.apply(this,[e,n])},Object.defineProperty(n,"on"+t,{get:function(){return this["_on"+t]},set:function(e){this["_on"+t]&&(this.removeEventListener(t,this["_on"+t]),delete this["_on"+t]),e&&this.addEventListener(t,this["_on"+t]=e)}})}}var i=e("sdp"),a=e("./utils");t.exports={shimRTCIceCandidate:function(e){if(!(e.RTCIceCandidate&&"foundation"in e.RTCIceCandidate.prototype)){var t=e.RTCIceCandidate;e.RTCIceCandidate=function(e){"object"==typeof e&&e.candidate&&0===e.candidate.indexOf("a=")&&(e=JSON.parse(JSON.stringify(e)),e.candidate=e.candidate.substr(2));var r=new t(e),n=i.parseCandidate(e.candidate),a=Object.assign(r,n);return a.toJSON=function(){return{candidate:a.candidate,sdpMid:a.sdpMid,sdpMLineIndex:a.sdpMLineIndex,usernameFragment:a.usernameFragment}},a},n(e,"icecandidate",function(t){return t.candidate&&Object.defineProperty(t,"candidate",{value:new e.RTCIceCandidate(t.candidate),writable:"false"}),t})}},shimCreateObjectURL:function(e){var t=e&&e.URL;if("object"==typeof e&&e.HTMLMediaElement&&"srcObject"in e.HTMLMediaElement.prototype&&t.createObjectURL&&t.revokeObjectURL){var r=t.createObjectURL.bind(t),n=t.revokeObjectURL.bind(t),i=new Map,o=0;t.createObjectURL=function(e){if("getTracks"in e){var t="polyblob:"+ ++o;return i.set(t,e),a.deprecated("URL.createObjectURL(stream)","elem.srcObject = stream"),t}return r(e)},t.revokeObjectURL=function(e){n(e),i.delete(e)};var s=Object.getOwnPropertyDescriptor(e.HTMLMediaElement.prototype,"src");Object.defineProperty(e.HTMLMediaElement.prototype,"src",{get:function(){return s.get.apply(this)},set:function(e){return this.srcObject=i.get(e)||null,s.set.apply(this,[e])}});var c=e.HTMLMediaElement.prototype.setAttribute;e.HTMLMediaElement.prototype.setAttribute=function(){return 2===arguments.length&&"src"===(""+arguments[0]).toLowerCase()&&(this.srcObject=i.get(arguments[1])||null),c.apply(this,arguments)}}}}},{"./utils":13,sdp:2}],8:[function(e,t,r){"use strict";var n=e("../utils"),i=e("rtcpeerconnection-shim");t.exports={shimGetUserMedia:e("./getusermedia"),shimPeerConnection:function(e){var t=n.detectBrowser(e);if(e.RTCIceGatherer&&(e.RTCIceCandidate||(e.RTCIceCandidate=function(e){return e}),e.RTCSessionDescription||(e.RTCSessionDescription=function(e){return e}),t.version<15025)){var r=Object.getOwnPropertyDescriptor(e.MediaStreamTrack.prototype,"enabled");Object.defineProperty(e.MediaStreamTrack.prototype,"enabled",{set:function(e){r.set.call(this,e);var t=new Event("enabled");t.enabled=e,this.dispatchEvent(t)}})}!e.RTCRtpSender||"dtmf"in e.RTCRtpSender.prototype||Object.defineProperty(e.RTCRtpSender.prototype,"dtmf",{get:function(){return void 0===this._dtmf&&("audio"===this.track.kind?this._dtmf=new e.RTCDtmfSender(this):"video"===this.track.kind&&(this._dtmf=null)),this._dtmf}}),e.RTCPeerConnection=i(e,t.version)},shimReplaceTrack:function(e){!e.RTCRtpSender||"replaceTrack"in e.RTCRtpSender.prototype||(e.RTCRtpSender.prototype.replaceTrack=e.RTCRtpSender.prototype.setTrack)}}},{"../utils":13,"./getusermedia":9,"rtcpeerconnection-shim":1}],9:[function(e,t,r){"use strict";t.exports=function(e){var t=e&&e.navigator,r=function(e){return{name:{PermissionDeniedError:"NotAllowedError"}[e.name]||e.name,message:e.message,constraint:e.constraint,toString:function(){return this.name}}},n=t.mediaDevices.getUserMedia.bind(t.mediaDevices);t.mediaDevices.getUserMedia=function(e){return n(e).catch(function(e){return Promise.reject(r(e))})}}},{}],10:[function(e,t,r){"use strict";var n=e("../utils"),i={shimOnTrack:function(e){"object"!=typeof e||!e.RTCPeerConnection||"ontrack"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"ontrack",{get:function(){return this._ontrack},set:function(e){this._ontrack&&(this.removeEventListener("track",this._ontrack),this.removeEventListener("addstream",this._ontrackpoly)),this.addEventListener("track",this._ontrack=e),this.addEventListener("addstream",this._ontrackpoly=function(e){e.stream.getTracks().forEach(function(t){var r=new Event("track");r.track=t,r.receiver={track:t},r.transceiver={receiver:r.receiver},r.streams=[e.stream],this.dispatchEvent(r)}.bind(this))}.bind(this))}}),"object"==typeof e&&e.RTCTrackEvent&&"receiver"in e.RTCTrackEvent.prototype&&!("transceiver"in e.RTCTrackEvent.prototype)&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get:function(){return{receiver:this.receiver}}})},shimSourceObject:function(e){"object"==typeof e&&(!e.HTMLMediaElement||"srcObject"in e.HTMLMediaElement.prototype||Object.defineProperty(e.HTMLMediaElement.prototype,"srcObject",{get:function(){return this.mozSrcObject},set:function(e){this.mozSrcObject=e}}))},shimPeerConnection:function(e){var t=n.detectBrowser(e);if("object"==typeof e&&(e.RTCPeerConnection||e.mozRTCPeerConnection)){e.RTCPeerConnection||(e.RTCPeerConnection=function(r,n){if(t.version<38&&r&&r.iceServers){for(var i=[],a=0;a<r.iceServers.length;a++){var o=r.iceServers[a];if(o.hasOwnProperty("urls"))for(var s=0;s<o.urls.length;s++){var c={url:o.urls[s]};0===o.urls[s].indexOf("turn")&&(c.username=o.username,c.credential=o.credential),i.push(c)}else i.push(r.iceServers[a])}r.iceServers=i}return new e.mozRTCPeerConnection(r,n)},e.RTCPeerConnection.prototype=e.mozRTCPeerConnection.prototype,e.mozRTCPeerConnection.generateCertificate&&Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:function(){return e.mozRTCPeerConnection.generateCertificate}}),e.RTCSessionDescription=e.mozRTCSessionDescription,e.RTCIceCandidate=e.mozRTCIceCandidate),["setLocalDescription","setRemoteDescription","addIceCandidate"].forEach(function(t){var r=e.RTCPeerConnection.prototype[t];e.RTCPeerConnection.prototype[t]=function(){return arguments[0]=new("addIceCandidate"===t?e.RTCIceCandidate:e.RTCSessionDescription)(arguments[0]),r.apply(this,arguments)}});var r=e.RTCPeerConnection.prototype.addIceCandidate;e.RTCPeerConnection.prototype.addIceCandidate=function(){return arguments[0]?r.apply(this,arguments):(arguments[1]&&arguments[1].apply(null),Promise.resolve())};var i=function(e){var t=new Map;return Object.keys(e).forEach(function(r){t.set(r,e[r]),t[r]=e[r]}),t},a={inboundrtp:"inbound-rtp",outboundrtp:"outbound-rtp",candidatepair:"candidate-pair",localcandidate:"local-candidate",remotecandidate:"remote-candidate"},o=e.RTCPeerConnection.prototype.getStats;e.RTCPeerConnection.prototype.getStats=function(e,r,n){return o.apply(this,[e||null]).then(function(e){if(t.version<48&&(e=i(e)),t.version<53&&!r)try{e.forEach(function(e){e.type=a[e.type]||e.type})}catch(t){if("TypeError"!==t.name)throw t;e.forEach(function(t,r){e.set(r,Object.assign({},t,{type:a[t.type]||t.type}))})}return e}).then(r,n)}}}};t.exports={shimOnTrack:i.shimOnTrack,shimSourceObject:i.shimSourceObject,shimPeerConnection:i.shimPeerConnection,shimGetUserMedia:e("./getusermedia")}},{"../utils":13,"./getusermedia":11}],11:[function(e,t,r){"use strict";var n=e("../utils"),i=n.log;t.exports=function(e){var t=n.detectBrowser(e),r=e&&e.navigator,a=e&&e.MediaStreamTrack,o=function(e){return{name:{InternalError:"NotReadableError",NotSupportedError:"TypeError",PermissionDeniedError:"NotAllowedError",SecurityError:"NotAllowedError"}[e.name]||e.name,message:{"The operation is insecure.":"The request is not allowed by the user agent or the platform in the current context."}[e.message]||e.message,constraint:e.constraint,toString:function(){return this.name+(this.message&&": ")+this.message}}},s=function(e,n,a){var s=function(e){if("object"!=typeof e||e.require)return e;var t=[];return Object.keys(e).forEach(function(r){if("require"!==r&&"advanced"!==r&&"mediaSource"!==r){var n=e[r]="object"==typeof e[r]?e[r]:{ideal:e[r]};if(void 0===n.min&&void 0===n.max&&void 0===n.exact||t.push(r),void 0!==n.exact&&("number"==typeof n.exact?n.min=n.max=n.exact:e[r]=n.exact,delete n.exact),void 0!==n.ideal){e.advanced=e.advanced||[];var i={};"number"==typeof n.ideal?i[r]={min:n.ideal,max:n.ideal}:i[r]=n.ideal,e.advanced.push(i),delete n.ideal,Object.keys(n).length||delete e[r]}}}),t.length&&(e.require=t),e};return e=JSON.parse(JSON.stringify(e)),t.version<38&&(i("spec: "+JSON.stringify(e)),e.audio&&(e.audio=s(e.audio)),e.video&&(e.video=s(e.video)),i("ff37: "+JSON.stringify(e))),r.mozGetUserMedia(e,n,function(e){a(o(e))})},c=function(e){return new Promise(function(t,r){s(e,t,r)})};if(r.mediaDevices||(r.mediaDevices={getUserMedia:c,addEventListener:function(){},removeEventListener:function(){}}),r.mediaDevices.enumerateDevices=r.mediaDevices.enumerateDevices||function(){return new Promise(function(e){e([{kind:"audioinput",deviceId:"default",label:"",groupId:""},{kind:"videoinput",deviceId:"default",label:"",groupId:""}])})},t.version<41){var d=r.mediaDevices.enumerateDevices.bind(r.mediaDevices);r.mediaDevices.enumerateDevices=function(){return d().then(void 0,function(e){if("NotFoundError"===e.name)return[];throw e})}}if(t.version<49){var p=r.mediaDevices.getUserMedia.bind(r.mediaDevices);r.mediaDevices.getUserMedia=function(e){return p(e).then(function(t){if(e.audio&&!t.getAudioTracks().length||e.video&&!t.getVideoTracks().length)throw t.getTracks().forEach(function(e){e.stop()}),new DOMException("The object can not be found here.","NotFoundError");return t},function(e){return Promise.reject(o(e))})}}if(!(t.version>55&&"autoGainControl"in r.mediaDevices.getSupportedConstraints())){var u=function(e,t,r){t in e&&!(r in e)&&(e[r]=e[t],delete e[t])},l=r.mediaDevices.getUserMedia.bind(r.mediaDevices);if(r.mediaDevices.getUserMedia=function(e){return"object"==typeof e&&"object"==typeof e.audio&&(e=JSON.parse(JSON.stringify(e)),u(e.audio,"autoGainControl","mozAutoGainControl"),u(e.audio,"noiseSuppression","mozNoiseSuppression")),l(e)},a&&a.prototype.getSettings){var f=a.prototype.getSettings;a.prototype.getSettings=function(){var e=f.apply(this,arguments);return u(e,"mozAutoGainControl","autoGainControl"),u(e,"mozNoiseSuppression","noiseSuppression"),e}}if(a&&a.prototype.applyConstraints){var m=a.prototype.applyConstraints;a.prototype.applyConstraints=function(e){return"audio"===this.kind&&"object"==typeof e&&(e=JSON.parse(JSON.stringify(e)),u(e,"autoGainControl","mozAutoGainControl"),u(e,"noiseSuppression","mozNoiseSuppression")),m.apply(this,[e])}}}r.getUserMedia=function(e,i,a){if(t.version<44)return s(e,i,a);n.deprecated("navigator.getUserMedia","navigator.mediaDevices.getUserMedia"),r.mediaDevices.getUserMedia(e).then(i,a)}}},{"../utils":13}],12:[function(e,t,r){"use strict";var n=e("../utils"),i={shimLocalStreamsAPI:function(e){if("object"==typeof e&&e.RTCPeerConnection){if("getLocalStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getLocalStreams=function(){return this._localStreams||(this._localStreams=[]),this._localStreams}),"getStreamById"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getStreamById=function(e){var t=null;return this._localStreams&&this._localStreams.forEach(function(r){r.id===e&&(t=r)}),this._remoteStreams&&this._remoteStreams.forEach(function(r){r.id===e&&(t=r)}),t}),!("addStream"in e.RTCPeerConnection.prototype)){var t=e.RTCPeerConnection.prototype.addTrack;e.RTCPeerConnection.prototype.addStream=function(e){this._localStreams||(this._localStreams=[]),-1===this._localStreams.indexOf(e)&&this._localStreams.push(e);var r=this;e.getTracks().forEach(function(n){t.call(r,n,e)})},e.RTCPeerConnection.prototype.addTrack=function(e,r){r&&(this._localStreams?-1===this._localStreams.indexOf(r)&&this._localStreams.push(r):this._localStreams=[r]),t.call(this,e,r)}}"removeStream"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.removeStream=function(e){this._localStreams||(this._localStreams=[]);var t=this._localStreams.indexOf(e);if(-1!==t){this._localStreams.splice(t,1);var r=this,n=e.getTracks();this.getSenders().forEach(function(e){-1!==n.indexOf(e.track)&&r.removeTrack(e)})}})}},shimRemoteStreamsAPI:function(e){"object"==typeof e&&e.RTCPeerConnection&&("getRemoteStreams"in e.RTCPeerConnection.prototype||(e.RTCPeerConnection.prototype.getRemoteStreams=function(){return this._remoteStreams?this._remoteStreams:[]}),"onaddstream"in e.RTCPeerConnection.prototype||Object.defineProperty(e.RTCPeerConnection.prototype,"onaddstream",{get:function(){return this._onaddstream},set:function(e){this._onaddstream&&(this.removeEventListener("addstream",this._onaddstream),this.removeEventListener("track",this._onaddstreampoly)),this.addEventListener("addstream",this._onaddstream=e),this.addEventListener("track",this._onaddstreampoly=function(e){var t=e.streams[0];if(this._remoteStreams||(this._remoteStreams=[]),!(this._remoteStreams.indexOf(t)>=0)){this._remoteStreams.push(t);var r=new Event("addstream");r.stream=e.streams[0],this.dispatchEvent(r)}}.bind(this))}}))},shimCallbacksAPI:function(e){if("object"==typeof e&&e.RTCPeerConnection){var t=e.RTCPeerConnection.prototype,r=t.createOffer,n=t.createAnswer,i=t.setLocalDescription,a=t.setRemoteDescription,o=t.addIceCandidate
;t.createOffer=function(e,t){var n=arguments.length>=2?arguments[2]:arguments[0],i=r.apply(this,[n]);return t?(i.then(e,t),Promise.resolve()):i},t.createAnswer=function(e,t){var r=arguments.length>=2?arguments[2]:arguments[0],i=n.apply(this,[r]);return t?(i.then(e,t),Promise.resolve()):i};var s=function(e,t,r){var n=i.apply(this,[e]);return r?(n.then(t,r),Promise.resolve()):n};t.setLocalDescription=s,s=function(e,t,r){var n=a.apply(this,[e]);return r?(n.then(t,r),Promise.resolve()):n},t.setRemoteDescription=s,s=function(e,t,r){var n=o.apply(this,[e]);return r?(n.then(t,r),Promise.resolve()):n},t.addIceCandidate=s}},shimGetUserMedia:function(e){var t=e&&e.navigator;t.getUserMedia||(t.webkitGetUserMedia?t.getUserMedia=t.webkitGetUserMedia.bind(t):t.mediaDevices&&t.mediaDevices.getUserMedia&&(t.getUserMedia=function(e,r,n){t.mediaDevices.getUserMedia(e).then(r,n)}.bind(t)))},shimRTCIceServerUrls:function(e){var t=e.RTCPeerConnection;e.RTCPeerConnection=function(e,r){if(e&&e.iceServers){for(var i=[],a=0;a<e.iceServers.length;a++){var o=e.iceServers[a];!o.hasOwnProperty("urls")&&o.hasOwnProperty("url")?(n.deprecated("RTCIceServer.url","RTCIceServer.urls"),o=JSON.parse(JSON.stringify(o)),o.urls=o.url,delete o.url,i.push(o)):i.push(e.iceServers[a])}e.iceServers=i}return new t(e,r)},e.RTCPeerConnection.prototype=t.prototype,Object.defineProperty(e.RTCPeerConnection,"generateCertificate",{get:function(){return t.generateCertificate}})},shimTrackEventTransceiver:function(e){"object"==typeof e&&e.RTCPeerConnection&&"receiver"in e.RTCTrackEvent.prototype&&!e.RTCTransceiver&&Object.defineProperty(e.RTCTrackEvent.prototype,"transceiver",{get:function(){return{receiver:this.receiver}}})}};t.exports={shimCallbacksAPI:i.shimCallbacksAPI,shimLocalStreamsAPI:i.shimLocalStreamsAPI,shimRemoteStreamsAPI:i.shimRemoteStreamsAPI,shimGetUserMedia:i.shimGetUserMedia,shimRTCIceServerUrls:i.shimRTCIceServerUrls,shimTrackEventTransceiver:i.shimTrackEventTransceiver}},{"../utils":13}],13:[function(e,t,r){"use strict";var n=!0,i=!0,a={disableLog:function(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(n=e,e?"adapter.js logging disabled":"adapter.js logging enabled")},disableWarnings:function(e){return"boolean"!=typeof e?new Error("Argument type: "+typeof e+". Please use a boolean."):(i=!e,"adapter.js deprecation warnings "+(e?"disabled":"enabled"))},log:function(){if("object"==typeof window){if(n)return;"undefined"!=typeof console&&"function"==typeof console.log&&console.log.apply(console,arguments)}},deprecated:function(e,t){i&&console.warn(e+" is deprecated, please use "+t+" instead.")},extractVersion:function(e,t,r){var n=e.match(t);return n&&n.length>=r&&parseInt(n[r],10)},detectBrowser:function(e){var t=e&&e.navigator,r={};if(r.browser=null,r.version=null,void 0===e||!e.navigator)return r.browser="Not a browser.",r;if(t.mozGetUserMedia)r.browser="firefox",r.version=this.extractVersion(t.userAgent,/Firefox\/(\d+)\./,1);else if(t.webkitGetUserMedia)if(e.webkitRTCPeerConnection)r.browser="chrome",r.version=this.extractVersion(t.userAgent,/Chrom(e|ium)\/(\d+)\./,2);else{if(!t.userAgent.match(/Version\/(\d+).(\d+)/))return r.browser="Unsupported webkit-based browser with GUM support but no WebRTC support.",r;r.browser="safari",r.version=this.extractVersion(t.userAgent,/AppleWebKit\/(\d+)\./,1)}else if(t.mediaDevices&&t.userAgent.match(/Edge\/(\d+).(\d+)$/))r.browser="edge",r.version=this.extractVersion(t.userAgent,/Edge\/(\d+).(\d+)$/,2);else{if(!t.mediaDevices||!t.userAgent.match(/AppleWebKit\/(\d+)\./))return r.browser="Not a supported browser.",r;r.browser="safari",r.version=this.extractVersion(t.userAgent,/AppleWebKit\/(\d+)\./,1)}return r}};t.exports={log:a.log,deprecated:a.deprecated,disableLog:a.disableLog,disableWarnings:a.disableWarnings,extractVersion:a.extractVersion,shimCreateObjectURL:a.shimCreateObjectURL,detectBrowser:a.detectBrowser.bind(a)}},{}]},{},[3])(3)});
(function(){var t,e,n,r,a;t=window.jQuery,t.paste=function(t){var n;return"undefined"!=typeof console&&null!==console&&console.log("DEPRECATED: This method is deprecated. Please use $.fn.pastableNonInputable() instead."),n=e.mountNonInputable(t),n._container},t.fn.pastableNonInputable=function(){var n,r,a,o;for(o=this,r=0,a=o.length;r<a;r++)n=o[r],n._pastable||t(n).is("textarea, input:text, [contenteditable]")||(e.mountNonInputable(n),n._pastable=!0);return this},t.fn.pastableTextarea=function(){var n,r,a,o;for(o=this,r=0,a=o.length;r<a;r++)n=o[r],n._pastable||t(n).is(":not(textarea, input:text)")||(e.mountTextarea(n),n._pastable=!0);return this},t.fn.pastableContenteditable=function(){var n,r,a,o;for(o=this,r=0,a=o.length;r<a;r++)n=o[r],n._pastable||t(n).is(":not([contenteditable])")||(e.mountContenteditable(n),n._pastable=!0);return this},r=function(t,e){var n,r,a,o,i,u,s,l,c,f,g;if(null==e&&(e=512),!(l=t.match(/^data\:([^\;]+)\;base64\,(.+)$/)))return null;for(f=l,l=f[0],u=f[1],n=f[2],o=atob(n),a=[],c=0;c<o.length;){for(g=o.slice(c,c+e),i=new Array(g.length),s=0;s<g.length;)i[s]=g.charCodeAt(s),s++;r=new Uint8Array(i),a.push(r),c+=e}return new Blob(a,{type:u})},n=function(){return t(document.createElement("div")).attr("contenteditable",!0).attr("aria-hidden",!0).attr("tabindex",-1).css({width:1,height:1,position:"fixed",left:-100,overflow:"hidden"})},a=function(e,n){var r,a,o,i,u,s;return i=void 0,u=void 0,o=void 0,a=void 0,r=void 0,"area"===(s=e.nodeName.toLowerCase())?(i=e.parentNode,u=i.name,!(!e.href||!u||"map"!==i.nodeName.toLowerCase())&&(o=t("img[usemap='#"+u+"']"),o.length>0&&o.is(":visible"))):(/^(input|select|textarea|button|object)$/.test(s)?(a=!e.disabled)&&(r=t(e).closest("fieldset")[0])&&(a=!r.disabled):a="a"===s?e.href||n:n,(a=a||t(e).is("[contenteditable]"))&&t(e).is(":visible"))},e=function(){function e(e,n){this._container=e,this._target=n,this._container=t(this._container),this._target=t(this._target).addClass("pastable"),this._container.on("paste",function(t){return function(e){var n,r,a,o,i,u,s,l,c,f,g,d,p;if(e.currentTarget!==e.target)return e.preventDefault();if(t._paste_event_fired=!0,null!=(null!=(c=e.originalEvent)?c.clipboardData:void 0))if(n=e.originalEvent.clipboardData,n.items)for(f=n.items,o=0,u=f.length;o<u;o++){if(a=f[o],a.type.match(/^image\//)){l=new FileReader,l.onload=function(e){return t._handleImage(e.target.result)};try{l.readAsDataURL(a.getAsFile())}catch(t){}e.preventDefault();break}"text/plain"===a.type&&a.getAsString(function(e){return t._target.trigger("pasteText",{text:e})})}else-1!==Array.prototype.indexOf.call(n.types,"text/plain")&&(p=n.getData("Text"),setTimeout(function(){return t._target.trigger("pasteText",{text:p})},1)),t._checkImagesInContainer(function(e){return t._handleImage(e)});if(n=window.clipboardData)if(null!=(g=p=n.getData("Text"))?g.length:void 0)setTimeout(function(){return t._target.trigger("pasteText",{text:p}),t._target.trigger("_pasteCheckContainerDone")},1);else{for(d=n.files,i=0,s=d.length;i<s;i++)r=d[i],t._handleImage(URL.createObjectURL(r));t._checkImagesInContainer(function(t){})}return null}}(this))}return e.prototype._target=null,e.prototype._container=null,e.mountNonInputable=function(r){var o;return o=new e(n().appendTo(r),r),t(r).on("click",function(t){return function(t){if(!a(t.target,!1))return o._container.focus()}}()),o._container.on("focus",function(e){return function(){return t(r).addClass("pastable-focus")}}()),o._container.on("blur",function(e){return function(){return t(r).removeClass("pastable-focus")}}())},e.mountTextarea=function(r){var a,o,i,u;return("undefined"!=typeof DataTransfer&&null!==DataTransfer?DataTransfer.prototype:void 0)&&(null!=(i=Object.getOwnPropertyDescriptor)&&null!=(u=i.call(Object,DataTransfer.prototype,"items"))?u.get:void 0)?this.mountContenteditable(r):(o=new e(n().insertBefore(r),r),a=!1,t(r).on("keyup",function(t){var e;return 17!==(e=t.keyCode)&&224!==e||(a=!1),null}),t(r).on("keydown",function(e){var n;return 17!==(n=e.keyCode)&&224!==n||(a=!0),null!=e.ctrlKey&&null!=e.metaKey&&(a=e.ctrlKey||e.metaKey),a&&86===e.keyCode&&(o._textarea_focus_stolen=!0,o._container.focus(),o._paste_event_fired=!1,setTimeout(function(e){return function(){if(!o._paste_event_fired)return t(r).focus(),o._textarea_focus_stolen=!1}}(),1)),null}),t(r).on("paste",function(t){return function(){}}()),t(r).on("focus",function(e){return function(){if(!o._textarea_focus_stolen)return t(r).addClass("pastable-focus")}}()),t(r).on("blur",function(e){return function(){if(!o._textarea_focus_stolen)return t(r).removeClass("pastable-focus")}}()),t(o._target).on("_pasteCheckContainerDone",function(e){return function(){return t(r).focus(),o._textarea_focus_stolen=!1}}()),t(o._target).on("pasteText",function(e){return function(e,n){var a,o,i;return i=t(r).prop("selectionStart"),o=t(r).prop("selectionEnd"),a=t(r).val(),t(r).val(""+a.slice(0,i)+n.text+a.slice(o)),t(r)[0].setSelectionRange(i+n.text.length,i+n.text.length),t(r).trigger("change")}}()))},e.mountContenteditable=function(n){return new e(n,n),t(n).on("focus",function(e){return function(){return t(n).addClass("pastable-focus")}}()),t(n).on("blur",function(e){return function(){return t(n).removeClass("pastable-focus")}}())},e.prototype._handleImage=function(t){var e;return t.match(/^webkit\-fake\-url\:\/\//)?this._target.trigger("pasteImageError",{message:"You are trying to paste an image in Safari, however we are unable to retieve its data."}):(this._target.trigger("pasteImageStart"),e=new Image,e.crossOrigin="anonymous",e.onload=function(t){return function(){var n,a,o,i;a=document.createElement("canvas"),a.width=e.width,a.height=e.height,o=a.getContext("2d"),o.drawImage(e,0,0,a.width,a.height),i=null;try{i=a.toDataURL("image/png"),n=r(i)}catch(t){}return i&&t._target.trigger("pasteImage",{blob:n,dataURL:i,width:e.width,height:e.height}),t._target.trigger("pasteImageEnd")}}(this),e.onerror=function(e){return function(){return e._target.trigger("pasteImageError",{message:"Failed to get image from: "+t,url:t}),e._target.trigger("pasteImageEnd")}}(this),e.src=t)},e.prototype._checkImagesInContainer=function(e){var n,r,a,o,i;for(i=Math.floor(1e3*Math.random()),o=this._container.find("img"),r=0,a=o.length;r<a;r++)n=o[r],n["_paste_marked_"+i]=!0;return setTimeout(function(r){return function(){var a,o,u;for(u=r._container.find("img"),a=0,o=u.length;a<o;a++)n=u[a],n["_paste_marked_"+i]||(e(n.src),t(n).remove());return r._target.trigger("_pasteCheckContainerDone")}}(this),1)},e}()}).call(this);
!function(t,e){t.fn.outerHTML||t.extend(t.fn,{outerHTML:function(){return t("<div>").append(this.clone()).html()}}),t.fn.inDOM||t.extend(t.fn,{inDOM:function(){return jQuery.contains(document,this[0])}});var i,n=null,r=0;e.guid=function(){var t,e=(new Date).getTime().toString(32);for(t=0;t<5;t++)e+=Math.floor(65535*Math.random()).toString(32);return"p"+e+(r++).toString(32)},window.URL=window.URL||window.webkitURL||window.mozURL||window.msURL,t.extend(t,{recorder:{supported:!1}}),t.fn.recorder=function(e){var i=this;return t.extend(this,t.fn.recorder.prototype),this.options=t.extend(!0,{constraints:{video:{width:1280,height:720},audio:!1},html5:{},autostart:!1},e),this.on("recorder:create",function(e,n){i.element||(i.element=n,t(n).appendTo(i).get(0))}),this.create(),this},t.extend(t.fn.recorder.prototype,{element:null,state:!1,create:function(){},start:function(){},stop:function(){},snapshot:function(){},update_state:function(e){this.state=e,this.trigger(t.Event("recorder:state:"+e),this.element,"ready"),this.attr("data-state",e)}});var o={html5:{supported:!(!window.URL||!window.URL.createObjectURL)&&function(){var t=document.createElement("canvas");return!(!t.getContext||!t.getContext("2d"))}()&&!!navigator.mediaDevices&&!!navigator.mediaDevices.getUserMedia,create:function(){var e=this,i="html5-webcam-recorder-"+window.guid(),n=e.options.height&&e.options.width?'width="'+e.options.width+'" height="'+e.options.height+'"':"",r='<video class="webcam-recorder" '+n+' id="'+i+'" autoplay="autoplay"></video>';this.trigger(t.Event("recorder:create"),t(r).get(0)),setTimeout(function(){e.update_state("ready")},20)},start:function(){var e=this;navigator.mediaDevices.getUserMedia(this.options.constraints).then(function(i){void 0!==this.element.mozSrcObject?this.element.mozSrcObject=i:this.element.src=window.URL&&window.URL.createObjectURL(i)||i,n=i,t(this.element).on("playing",function(t){e.update_state("started")})}.bind(this)).catch(function(t){1===t.code||"PermissionDeniedError"==t.name||"PermissionDismissedError"==t.name?e.update_state("permissionerror"):e.update_state("error")}),this.update_state("waiting")},stop:function(){var e,i;if(n)if(n.stop)n.stop();else if(n.getVideoTracks){e=n.getVideoTracks();for(i in e)e[i].stop&&e[i].stop()}t(this.element).off("playing"),this.update_state("stopped")},snapshot:function(){var e,i;if(e=this.element.videoWidth||this.width(),i=this.element.videoHeight||this.height(),n){var r=t('<canvas style="display:block"></canvas>').insertAfter(this).attr("width",e).attr("height",i);return r.get(0).getContext("2d").drawImage(this.element,0,0,e,i),dataSrc=r.get(0).toDataURL("image/png"),r.remove(),dataSrc}}}};for(i in o)if(o[i].supported){t.extend(t.fn.recorder.prototype,o[i]),t.recorder.supported=!0;break}}(jQuery,window);
!function(e,o){var t=navigator.userAgent.indexOf("Chrome")>-1;o.cheese=e.extend({supports:{paste:cheese.options.enable_pasteboard&&("paste"in document||"onpaste"in document||"object"==typeof window.onpaste||"onpaste"in document.createElement("DIV")),webcam_recording:cheese.options.enable_snapshot&&e.recorder.supported&&(!t||t&&"https:"===location.protocol)},view:{},wpUloader:!1,getWpUploader:function(){return cheese.wpUploader}},cheese)}(jQuery,wp.media);
!function(e,t){var a=wp.media.cheese.l10n;navigator.userAgent.indexOf("Chrome");e.extend(wp.Uploader.prototype,{success:function(e){}}),_.extend(wp.media.view.MediaFrame.Select.prototype,{_parentInitialize:wp.media.view.MediaFrame.Select.prototype.initialize,initialize:function(){this._parentInitialize.apply(this,arguments),this.bindCheeseHandlers()},_parentBrowseRouter:wp.media.view.MediaFrame.Select.prototype.browseRouter,browseRouter:function(e){this._parentBrowseRouter.apply(this,arguments),wp.media.cheese.supports.webcam_recording&&e.set({record:{text:a.webcam_record,priority:30}}),wp.media.cheese.supports.paste&&e.set({pasteboard:{text:a.copy_paste,priority:35}})},bindCheeseHandlers:function(){var e=!1;this.on("content:render close",function(t){e&&"function"==typeof e.dismiss&&e.dismiss(),void 0!==t&&(e=t)},this),this.on("content:create:pasteboard",this.contentCreatePasteboard,this),this.on("content:create:record",this.contentCreateRecord,this),this.on("content:render:pasteboard content:render:record",this.contentRenderGrabber,this),frame=this},contentCreateRecord:function(e){this.state();this.currentCheeseView=e.view=new wp.media.cheese.view.DataSourceImageGrabber({controller:this,grabber:wp.media.cheese.view.WebcamRecorder}),this.listenTo(this.currentCheeseView.uploader,"action:uploaded:dataimage",this.uploadedDataImage)},contentCreatePasteboard:function(e){this.state();this.currentCheeseView=e.view=new wp.media.cheese.view.DataSourceImageGrabber({controller:this,grabber:wp.media.cheese.view.Pasteboard}),this.listenTo(this.currentCheeseView.uploader,"action:uploaded:dataimage",this.uploadedDataImage)},contentRenderGrabber:function(e){e.startGrabbing()},uploadedDataImage:function(e){this.stopListening(this.currentCheeseView.uploader,"action:uploaded:dataimage");var t={view:null};this.browseContent(t),this.content.set(t.view),this.router.get().select("browse")}}),_.extend(wp.media.view.AttachmentsBrowser.prototype,{_parentInitialize:wp.media.view.AttachmentsBrowser.prototype.initialize,initialize:function(){var e,t,i=this;this._parentInitialize.apply(this,arguments),this.cheese={paste:{grabber:!1,modal:!1,mode:"paste"},record:{grabber:!1,modal:!1,mode:"record"},current:!1},this.controller instanceof wp.media.view.MediaFrame.Select||(wp.media.cheese.supports.paste&&(e=new wp.media.view.Button({text:a.copy_paste,className:"grabber-button",priority:-64,click:function(){i.cheese.active=i.cheese.paste,i.cheeseOpen(a.copy_paste)}}),this.cheese.paste.grabber=new wp.media.cheese.view.DataSourceImageGrabber({controller:this.controller,grabber:wp.media.cheese.view.Pasteboard,wpuploader:this.controller.uploader.uploader.uploader}),this.toolbar.set("pasteModeButton",e.render())),wp.media.cheese.supports.webcam_recording&&(t=new wp.media.view.Button({text:a.take_snapshot,className:"grabber-button",priority:-65,click:function(){i.cheese.active=i.cheese.record,i.cheeseOpen(a.take_snapshot)}}),this.cheese.record.grabber=new wp.media.cheese.view.DataSourceImageGrabber({controller:this.controller,grabber:wp.media.cheese.view.WebcamRecorder,wpuploader:this.controller.uploader.uploader.uploader}),this.toolbar.set("recordModeButton",t.render())))},cheeseUploaded:function(e){this.cheese.active.grabber.dismiss(),this.cheese.modal.close(),this.cheeseClose()},cheeseError:function(e){console.log("error",e)},cheeseOpen:function(e){var t=this;this.cheese.modal=new wp.media.view.Modal({controller:this,title:e}),this.cheese.modal.content(this.cheese.active.grabber),this.cheese.modal.open(),this.cheese.modal.on("close",function(){t.cheeseClose.apply(t),t.cheese.active.grabber.stopGrabbing()}),this.cheese.active.grabber.startGrabbing(),this.listenTo(this.cheese.active.grabber.uploader,"action:uploaded:dataimage",this.cheeseUploaded),this.listenTo(this.cheese.active.grabber.uploader,"error:uploaded:dataimage",this.cheeseError)},cheeseClose:function(){this.controller.deactivateMode(this.cheese.active.mode).activateMode("edit"),this.stopListening(this.cheese.active.grabber.uploader,"action:uploaded:dataimage"),this.stopListening(this.cheese.active.grabber.uploader,"error:uploaded:dataimage")}})}(jQuery,window);
!function(e,t,i){var a=wp.media.cheese,r=(wp.media.view.Button,wp.media.view.Modal,a.l10n);wp.media.cheese.view.DataSourceImageUploader=wp.media.View.extend({template:wp.template("cheese-uploader"),className:"cheese-uploader",controller:null,image:null,$discardBtn:null,$uploadBtn:null,uploader:null,events:{'click [data-action="upload"]':"uploadImage",'click [data-action="discard"]':"discardImage"},initialize:function(){wp.media.View.prototype.initialize.apply(this,arguments),_.defaults(this.options,{defaultFileName:r.image});new wp.media.View({tagName:"div",className:"instruments",controller:this.controller});this.uploader=this.options.uploder},setImageData:function(e){var t=this.$imageContainer.html("").get(0),a=this;return this.image&&this.image.destroy(),this.image=new i.Image,this.image.onload=function(){var e=a.getUploader().getOption("resize"),i=Math.max(e.width/this.width,e.height/this.height);!!e&&i<1&&this.downsize(this.width*i,this.height*i),this.embed(t)},this.image.bind("Resize",function(e){this.embed(t)}),this.image.load(e),this.$imageContainer&&this.$imageContainer.append(this.image),this.disabled(!1),this},render:function(){return wp.media.View.prototype.render.apply(this,arguments),this.$imageContainer=this.$(".image-container"),this.$discardBtn=this.$('[data-action="discard"]'),this.$uploadBtn=this.$('[data-action="upload"]'),this.$('[data-setting="title"]').val(this.options.defaultFileName),this},discardImage:function(){this.trigger("action:discard:dataimage",this),this.unbindUploaderEvents()},uploadImage:function(){var e=this.$('input[data-setting="title"]').val()+".png",t=this.image.getAsBlob("image/png");this.bindUploaderEvents(),t.detach(t.getSource()),t.name=e,t.type="image/png",this.getUploader().addFile(t,e),this.disabled(!0),this.trigger("action:upload:dataimage",this)},show:function(){return this.$el.show(),this},hide:function(){return this.$el.hide(),this},disabled:function(e){this.$discardBtn.prop("disabled",e),this.$uploadBtn.prop("disabled",e)},_uploadSuccessHandler:function(){this.trigger("action:uploaded:dataimage"),this.disabled(!1),this.unbindUploaderEvents()},_uploadErrorHandler:function(){this.trigger("error:uploaded:dataimage"),this.disabled(!1),this.unbindUploaderEvents()},bindUploaderEvents:function(){this.getUploader().bind("FileUploaded",this._uploadSuccessHandler,this),this.getUploader().bind("Error",this._uploadErrorHandler,this)},unbindUploaderEvents:function(){this.getUploader().unbind("FileUploaded",this._uploadSuccessHandler,this),this.getUploader().unbind("Error",this._uploadErrorHandler,this)},getUploader:function(){return this.controller.uploader.uploader.uploader}}),wp.media.cheese.view.WebcamRecorder=wp.media.View.extend({template:wp.template("cheese-recorder"),className:"cheese-recorder",controller:null,action:"record",$webcam:null,$recorder:null,events:{'click [data-action="init"]':"start",'click [data-action="record"]':"recordImage"},render:function(){var t={camera:{mandatory:{minWidth:640,minHeight:480}},microphone:!1};return wp.media.View.prototype.render.apply(this,arguments),this.$recorder=this.$(".recorder"),this.$webcam=e(this.$recorder).recorder(t),this},recordImage:function(e){this.trigger("action:create:dataimage",this,this.$webcam.snapshot()),this.stop()},get_state:function(){return this.$webcam.state},start:function(){return this.$recorder.is(":visible")||this.$recorder.show(),this.$webcam.start(),this},stop:function(){return this.$webcam.stop(),this.$recorder.is(":visible")&&this.$recorder.hide(),this},show:function(){return this.$el.show(),this},hide:function(){return this.$el.hide(),this}}),wp.media.cheese.view.Pasteboard=wp.media.View.extend({template:wp.template("cheese-pasteboard"),className:"cheese-pasteboard",controller:null,action:"paste",$pasteboard:null,render:function(){var e=this;return wp.media.View.prototype.render.apply(this,arguments),this.$pasteboard=this.$(".injector").pastableContenteditable(),this.$message=this.$(".message"),this.$pasteboard.on("click",function(){e.show_message("")}),this},start:function(){var t=this;return this.$pasteboard.on("pasteImage",function(e,i){t.trigger("action:create:dataimage",this,i.dataURL)}).on("pasteImageError",function(i,a){t.show_message(r.paste_error),e(this).html("")}).on("pasteText",function(i,a){t.show_message(r.paste_error_no_image),e(this).html("")}),setTimeout(function(){t.$pasteboard.get(0).focus()},1),this},stop:function(){return this.$pasteboard.off("pasteImage").off("pasteImageError").off("pasteText"),this},show:function(){return this.$el.show(),this},hide:function(){return this.$el.hide(),this},show_message:function(e){this.$message.text(e)}}),wp.media.cheese.view.DataSourceImageGrabber=wp.media.View.extend({template:wp.template("cheese-grabber"),className:"cheese-grabber",grabber:null,uploader:null,initialize:function(){var e=wp.media.View.prototype.initialize.apply(this,arguments);return _.defaults(this.options,{wpuploader:null,defaultFileName:this.options.grabber==wp.media.cheese.view.WebcamRecorder?r.snapshot:this.options.grabber==wp.media.cheese.view.Pasteboard?r.pasted:r.image,title:this.options.grabber==wp.media.cheese.view.WebcamRecorder?r.take_snapshot:this.options.grabber==wp.media.cheese.view.Pasteboard?r.copy_paste:r.image}),this.grabber=new this.options.grabber({controller:this.controller}),this.uploader=new wp.media.cheese.view.DataSourceImageUploader({controller:this.controller,uploder:this.options.wpuploader,defaultFileName:this.options.defaultFileName}),this.render(),this.listenTo(this.grabber,"action:create:dataimage",this.imageCreated),this.listenTo(this.uploader,"action:discard:dataimage",this.startGrabbing),e},render:function(){return wp.media.View.prototype.render.apply(this,arguments),this.$(".content").append(this.grabber.render().$el).append(this.uploader.render().$el),this},imageCreated:function(e,t){this.grabber.stop().hide(),this.uploader.show().setImageData(t)},startGrabbing:function(){return this.uploader.hide(),this.grabber.show().start(),this},stopGrabbing:function(){return this.grabber.stop(),this},getAction:function(){return this.grabber.action},dismiss:function(){return this.grabber.stop(),this}})}(jQuery,window,mOxie);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
